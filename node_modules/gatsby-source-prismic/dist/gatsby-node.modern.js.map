{"version":3,"file":"gatsby-node.modern.js","sources":["../src/validateOptions.ts","../src/utils.ts","../src/types.ts","../src/schemasToTypeDefs.ts","../src/constants.ts","../src/api.ts","../src/documentsToNodes.ts","../src/environment.node.ts","../src/gqlTypes.ts","../src/gatsby-node.ts"],"sourcesContent":["import * as struct from 'superstruct'\n\nimport { PluginOptions, BrowserPluginOptions } from './types'\n\nconst baseSchema = {\n  repositoryName: struct.string(),\n  accessToken: struct.optional(struct.string()),\n  releaseID: struct.optional(struct.string()),\n  schemas: struct.record(struct.string(), struct.object()),\n  linkResolver: struct.defaulted(struct.func(), () => () => () => {}),\n  htmlSerializer: struct.defaulted(struct.func(), () => () => () => {}),\n  fetchLinks: struct.defaulted(struct.array(struct.string()), []),\n  lang: struct.defaulted(struct.string(), '*'),\n  typePathsFilenamePrefix: struct.defaulted(\n    struct.string(),\n    'prismic-typepaths---',\n  ),\n  prismicToolbar: struct.defaulted(\n    struct.union([struct.boolean(), struct.enums(['legacy'])]),\n    false,\n  ),\n  imageImgixParams: struct.defaulted(\n    struct.record(\n      struct.string(),\n      struct.optional(\n        struct.union([struct.string(), struct.number(), struct.boolean()]),\n      ),\n    ),\n    { auto: 'format,compress', fit: 'max', q: 50 },\n  ),\n  imagePlaceholderImgixParams: struct.defaulted(\n    struct.record(\n      struct.string(),\n      struct.optional(\n        struct.union([struct.string(), struct.number(), struct.boolean()]),\n      ),\n    ),\n    { w: 100, blur: 15, q: 20 },\n  ),\n  plugins: struct.defaulted(struct.empty(struct.array()), []),\n} as const\n\nconst PluginOptions = struct.object({\n  ...baseSchema,\n  shouldDownloadImage: struct.defaulted(\n    struct.optional(struct.func()),\n    () => () => false,\n  ),\n})\n\nconst BrowserPluginOptions = struct.object({\n  ...baseSchema,\n  pathResolver: struct.optional(struct.func()),\n  schemasDigest: struct.string(),\n})\n\nexport const validatePluginOptions = (pluginOptions: PluginOptions) => {\n  const coerced = struct.coerce(pluginOptions, PluginOptions)\n  struct.assert(coerced, PluginOptions)\n  return (coerced as unknown) as PluginOptions\n}\n\nexport const validateBrowserOptions = (\n  browserOptions: BrowserPluginOptions,\n) => {\n  const coerced = struct.coerce(browserOptions, BrowserPluginOptions)\n  struct.assert(coerced, BrowserPluginOptions)\n  return (coerced as unknown) as BrowserPluginOptions\n}\n","import * as React from 'react'\nimport { pascalCase, pascalCaseTransformMerge } from 'pascal-case'\n\n/**\n * Returns a namespaced string intended for logging.\n *\n * @param message Message to namespace.\n *\n * @returns Namespaced message.\n */\nexport const msg = (message: string) => `gatsby-source-prismic - ${message}`\n\n/**\n * Maps key-value tuples of an object to new key-value tuples to create a new\n * object.\n *\n * @param fn Function that maps a key-value tuple to a new key-value tuple.\n * @param obj Object to map to a new object.\n *\n * @returns New object with mapped key-values.\n */\nexport const mapObj = <T1, T2>(\n  fn: (entry: [string, T1]) => [string, T2],\n  obj: { [key: string]: T1 },\n): { [key: string]: T2 } => {\n  const entries = Object.entries(obj)\n  const pairs = entries.map((x) => fn(x))\n\n  const result: { [key: string]: T2 } = {}\n\n  for (let i = 0; i < pairs.length; i++) {\n    const [k, v] = pairs[i]\n    result[k] = v\n  }\n\n  return result\n}\n\n/**\n * Maps key-value tuples of an object to new key-value tuples to create a new\n * object. The mapper function can be async.\n *\n * @param fn Function that maps a key-value tuple to a new key-value tuple.\n * @param obj Object to map to a new object.\n *\n * @returns New object with mapped key-values.\n */\nexport const mapObjP = async <T1, T2>(\n  fn: (entry: [string, T1]) => Promise<[string, T2]>,\n  obj: { [key: string]: T1 },\n): Promise<{ [key: string]: T2 }> => {\n  const entries = Object.entries(obj)\n  const pairs = await Promise.all(entries.map((x) => Promise.resolve(fn(x))))\n\n  const result: { [key: string]: T2 } = {}\n\n  for (let i = 0; i < pairs.length; i++) {\n    const [k, v] = pairs[i]\n    result[k] = v\n  }\n\n  return result\n}\n\n/**\n * Maps values of an object to new values.\n *\n * @param fn Function that maps a value and key to a new value.\n * @param obj Object to map to a new object.\n *\n * @returns New object with mapped values.\n */\nexport const mapObjVals = <T1, T2>(\n  fn: (val: T1, key: string) => T2,\n  obj: { [key: string]: T1 },\n): { [key: string]: T2 } => {\n  const result: { [key: string]: T2 } = {}\n\n  for (const key in obj) result[key] = fn(obj[key], key)\n\n  return result\n}\n\n/**\n * Maps values of an object to new values.\n *\n * @param fn Function that maps a value and key to a new value.\n * @param obj Object to map to a new object.\n *\n * @returns New object with mapped values.\n */\nexport const mapObjValsP = async <T1, T2>(\n  fn: (val: T1, key: string) => Promise<T2>,\n  obj: { [key: string]: T1 },\n): Promise<{ [key: string]: T2 }> => {\n  const result: { [key: string]: T2 } = {}\n\n  const keys = Object.keys(obj)\n  await Promise.all(\n    keys.map(async (key) => {\n      result[key] = await fn(obj[key], key)\n    }),\n  )\n\n  return result\n}\n\n/**\n * Returns true if the provided object has no keys, false otherwise.\n *\n * @param obj Object to check.\n *\n * @returns `true` if `obj` has no keys, `false` otherwise.\n */\nexport const isEmptyObj = (obj: object) => {\n  for (const _ in obj) return false\n  return true\n}\n\n/**\n * Returns a valid GraphQL type name for a Prismic schema.\n *\n * @param apiId API ID of the schema.\n *\n * @returns Type name for the schema.\n */\nexport const buildSchemaTypeName = (apiId: string) =>\n  pascalCase(`Prismic ${apiId}`, { transform: pascalCaseTransformMerge })\n\n/**\n * Determines whether the current context is the browser.\n *\n * @returns `true` if the current context is the browser, `false` otherwise.\n */\nexport const isBrowser = typeof window !== 'undefined'\n\nexport const getComponentDisplayName = (\n  WrappedComponent: React.ComponentType<any>,\n) => WrappedComponent.displayName || WrappedComponent.name || 'Component'\n","import {\n  PluginOptions as GatsbyPluginOptions,\n  SourceNodesArgs,\n  NodeInput,\n  Node,\n} from 'gatsby'\nimport { FixedObject, FluidObject } from 'gatsby-image'\nimport { Document as PrismicDocument } from 'prismic-javascript/d.ts/documents'\nimport * as PrismicDOM from 'prismic-dom'\nimport { ImgixUrlParams } from 'gatsby-plugin-imgix'\n\nexport type NodeID = string\n\nexport interface NodeTree {\n  [key: string]: Node\n}\n\nexport interface DocumentNodeInput extends NodeInput {\n  prismicId: PrismicDocument['id']\n  data: { [key: string]: NormalizedField }\n  dataString: string\n  dataRaw: PrismicDocument['data']\n  alternate_languages: NormalizedAlternateLanguagesField\n  url?: string\n}\n\nexport interface SliceNodeInput extends NodeInput {\n  slice_type: string\n  slice_label?: string\n  primary: { [key: string]: NormalizedField }\n  items: { [key: string]: NormalizedField }[]\n}\n\nexport interface DocumentsToNodesEnvironment {\n  createNode: (node: NodeInput) => void\n  createNodeId: (input: string) => string\n  createContentDigest: (input: string | object) => string\n  normalizeImageField: ImageFieldNormalizer\n  normalizeLinkField: LinkFieldNormalizer\n  normalizeSlicesField: SlicesFieldNormalizer\n  normalizeStructuredTextField: StructuredTextFieldNormalizer\n  typePaths: TypePath[]\n  pluginOptions: PluginOptions\n  context:\n    | DocumentsToNodesEnvironmentNodeContext\n    | DocumentsToNodesEnvironmentBrowserContext\n}\n\nexport interface DocumentsToNodesEnvironmentNodeContext {\n  gatsbyContext: SourceNodesArgs\n}\n\nexport interface DocumentsToNodesEnvironmentBrowserContext {\n  hasNodeById: (id: string) => boolean\n  getNodeById: <T>(id: string) => T & Node\n}\n\nexport interface TypePath {\n  path: string[]\n  type: GraphQLType | string\n}\n\nexport type FieldNormalizer<T, N> = (\n  apiId: string,\n  field: T,\n  path: TypePath['path'],\n  doc: PrismicDocument,\n  env: DocumentsToNodesEnvironment,\n) => N | Promise<N>\n\nexport type ImageFieldNormalizer = FieldNormalizer<\n  ImageField,\n  NormalizedImageField\n>\n\nexport type LinkFieldNormalizer = FieldNormalizer<\n  LinkField,\n  NormalizedLinkField\n>\n\nexport type SlicesFieldNormalizer = FieldNormalizer<\n  SliceIDsField,\n  NormalizedSlicesField\n>\n\nexport type StructuredTextFieldNormalizer = FieldNormalizer<\n  StructuredTextField,\n  NormalizedStructuredTextField\n>\n\nexport type Field =\n  | StructuredTextField\n  | ImageField\n  | SlicesField\n  | GroupField\n  | LinkField\n  | AlternateLanguagesField\n  | string\n  | number\n  | boolean\n  | null\n\nexport type NormalizedField =\n  | NormalizedStructuredTextField\n  | NormalizedImageField\n  | NormalizedSlicesField\n  | NormalizedGroupField\n  | NormalizedLinkField\n  | NormalizedAlternateLanguagesField\n  | Field\n\nexport type StructuredTextField = {\n  type: string\n  text: string\n  spans: { [key: string]: unknown }\n}[]\n\nexport interface NormalizedStructuredTextField {\n  html: string\n  text: string\n  raw: StructuredTextField\n}\n\nexport type SlicesField = Slice[]\n\ninterface Slice {\n  slice_type: string\n  slice_label: string | null\n  items: { [key: string]: Field }[]\n  primary: { [key: string]: Field }\n}\n\nexport type SliceIDsField = NodeID[]\n\nexport type NormalizedSlicesField = NodeID[]\n\nexport enum LinkFieldType {\n  Any = 'Any',\n  Document = 'Document',\n  Media = 'Media',\n  Web = 'Web',\n}\n\nexport interface LinkField {\n  link_type: LinkFieldType\n  isBroken: boolean\n  url?: string\n  target?: string\n  size?: number\n  id?: string\n  type?: string\n  tags?: string[]\n  lang?: string\n  slug?: string\n  uid?: string\n}\n\nexport interface NormalizedLinkField extends LinkField {\n  url: string\n  document?: NodeID\n  raw: LinkField\n}\n\nexport interface ImageField {\n  alt?: string\n  copyright?: string\n  dimensions?: { width: number; height: number }\n  url?: string\n  // This should be ImageThumbnailField, but TypeScript does not let us\n  // type unknown field types separatly from known without widening the type.\n  [key: string]: unknown\n}\n\nexport interface NormalizedImageField extends ImageField {\n  thumbnails?: { [key: string]: NormalizedImageField }\n  fixed?: FixedObject\n  fluid?: FluidObject\n  localFile?: NodeID\n}\n\nexport type AlternateLanguagesField = LinkField[]\n\nexport type NormalizedAlternateLanguagesField = AlternateLanguagesField\n\nexport type GroupField = { [key: string]: Field }[]\n\nexport type NormalizedGroupField = { [key: string]: NormalizedField }[]\n\nexport enum FieldType {\n  Boolean = 'Boolean',\n  Color = 'Color',\n  Date = 'Date',\n  Embed = 'Embed',\n  GeoPoint = 'GeoPoint',\n  Group = 'Group',\n  Image = 'Image',\n  Link = 'Link',\n  Number = 'Number',\n  Select = 'Select',\n  Slice = 'Slice',\n  Slices = 'Slices',\n  StructuredText = 'StructuredText',\n  Text = 'Text',\n  Timestamp = 'Timestamp',\n  UID = 'UID',\n  // Internal plugin-specific field not defined in the in Prismic schema.\n  AlternateLanguages = 'AlternateLanguages',\n}\n\nexport enum GraphQLType {\n  ID = 'ID',\n  Boolean = 'Boolean',\n  String = 'String',\n  Float = 'Float',\n  Date = 'Date',\n  JSON = 'JSON',\n  Link = 'PrismicLinkType',\n  Image = 'PrismicImageType',\n  ImageThumbnail = 'PrismicImageThumbnailType',\n  ImageThumbnails = 'PrismicImageThumbnailsType',\n  Embed = 'PrismicEmbedType',\n  GeoPoint = 'PrismicGeoPointType',\n  StructuredText = 'PrismicStructuredTextType',\n  AllDocumentTypes = 'PrismicAllDocumentTypes',\n  Group = 'Group',\n  Slices = 'Slices',\n  AlternateLanguages = 'AlternateLanguages',\n}\n\nexport interface GraphQLTypeObj {\n  type: GraphQLType | string\n  extensions?: { [key: string]: any }\n  resolve?: Function\n}\n\ninterface BaseFieldConfigSchema {\n  label?: string\n  labels?: { [key: string]: string[] }\n  placeholder?: string\n  [key: string]: unknown\n}\n\nexport interface BaseFieldSchema {\n  type: FieldType\n  config: BaseFieldConfigSchema\n}\n\nexport interface ImageFieldSchema extends BaseFieldSchema {\n  type: FieldType.Image\n  config: ImageFieldConfigSchema\n}\n\ninterface ThumbnailSchema {\n  name: string\n  width?: string\n  height?: string\n}\n\ninterface ImageFieldConfigSchema extends BaseFieldConfigSchema {\n  constraint?: { width?: number; height?: number }\n  thumbnails?: ThumbnailSchema[]\n}\n\nexport interface SlicesFieldSchema extends BaseFieldSchema {\n  type: FieldType.Slices\n  fieldset: string\n  config: SlicesFieldConfigSchema\n}\n\ninterface SlicesFieldConfigSchema extends BaseFieldConfigSchema {\n  choices: SliceChoicesSchema\n}\n\nexport interface SliceChoicesSchema {\n  [sliceId: string]: SliceFieldSchema\n}\n\nenum SliceChoiceDisplay {\n  List = 'list',\n  Grid = 'grid',\n}\n\nexport interface SliceFieldSchema extends BaseFieldSchema {\n  type: FieldType.Slice\n  fieldset: string\n  description: string\n  icon: string\n  display: SliceChoiceDisplay\n  repeat?: FieldsSchema\n  'non-repeat'?: FieldsSchema\n}\n\nexport interface GroupFieldSchema extends BaseFieldSchema {\n  type: FieldType.Group\n  config: GroupFieldConfigSchema\n}\n\ninterface GroupFieldConfigSchema extends BaseFieldConfigSchema {\n  fields: FieldsSchema\n}\n\nexport type FieldSchema =\n  | BaseFieldSchema\n  | ImageFieldSchema\n  | SlicesFieldSchema\n  | GroupFieldSchema\n  | SliceFieldSchema\n\nexport interface FieldsSchema {\n  [fieldId: string]: FieldSchema\n}\n\nexport interface Schema {\n  [tabName: string]: {\n    [fieldId: string]: FieldSchema\n  }\n}\n\nexport interface Schemas {\n  [schemaId: string]: Schema\n}\n\nexport type LinkResolver = (doc: object) => string\nexport type PluginLinkResolver = (input: {\n  key?: string\n  value?: unknown\n  node: PrismicDocument\n}) => LinkResolver\n\nexport type HTMLSerializer = typeof PrismicDOM.HTMLSerializer\nexport type PluginHTMLSerializer = (input: {\n  key: string\n  value: unknown\n  node: PrismicDocument\n}) => HTMLSerializer\n\ntype ShouldDownloadImage = (input: {\n  key: string\n  value: unknown\n  node: PrismicDocument\n}) => boolean | Promise<boolean>\n\nexport type BrowserPluginOptions = GatsbyPluginOptions &\n  Pick<\n    PluginOptions,\n    | 'repositoryName'\n    | 'accessToken'\n    | 'fetchLinks'\n    | 'schemas'\n    | 'lang'\n    | 'typePathsFilenamePrefix'\n    | 'prismicToolbar'\n  >\n\nexport interface PluginOptions extends GatsbyPluginOptions {\n  repositoryName: string\n  releaseID?: string\n  accessToken?: string\n  linkResolver?: PluginLinkResolver\n  htmlSerializer?: PluginHTMLSerializer\n  fetchLinks?: string[]\n  schemas: Schemas\n  lang?: string\n  shouldDownloadImage?: ShouldDownloadImage\n  shouldNormalizeImage?: ShouldDownloadImage\n  typePathsFilenamePrefix?: string\n  prismicToolbar?: boolean | 'legacy'\n  imageImgixParams?: ImgixUrlParams\n  imagePlaceholderImgixParams?: ImgixUrlParams\n}\n","import { msg, mapObjVals, isEmptyObj, buildSchemaTypeName } from './utils'\n\nimport { SourceNodesArgs, GatsbyGraphQLType, NodePluginSchema } from 'gatsby'\nimport {\n  BaseFieldSchema,\n  FieldSchema,\n  FieldType,\n  GraphQLType,\n  GraphQLTypeObj,\n  GroupFieldSchema,\n  ImageFieldSchema,\n  Schema,\n  Schemas,\n  SliceFieldSchema,\n  SlicesFieldSchema,\n  TypePath,\n  SliceIDsField,\n} from './types'\n\n/**\n * Enqueues a GraphQL type definition to be created at a later time.\n *\n * @param typeDef GraphQL type definition.\n */\ntype EnqueueTypeDef = (typeDef: GatsbyGraphQLType) => void\n\n/**\n * Enqueues a TypePath to the store.\n *\n * @param path Path to the field.\n * @param type GraphQL type identifier for the field.\n */\ntype EnqueueTypePath = (path: string[], type: GraphQLType | string) => void\n\ninterface SchemasToTypeDefsContext {\n  customTypeApiId: string\n  sliceZoneId?: string\n  gatsbyContext: SourceNodesArgs\n  enqueueTypeDef: EnqueueTypeDef\n  enqueueTypePath: EnqueueTypePath\n}\n\nconst fieldToType = (\n  apiId: string,\n  field: FieldSchema,\n  path: string[],\n  context: SchemasToTypeDefsContext,\n): GraphQLTypeObj | GraphQLType | string => {\n  const {\n    customTypeApiId,\n    enqueueTypeDef,\n    enqueueTypePath,\n    gatsbyContext,\n    sliceZoneId,\n  } = context\n  const { schema: gatsbySchema, reporter } = gatsbyContext\n\n  // Casting to `FieldType | string` since we may come across an unsupported\n  // field type. This will happen when Prismic introduces new field types.\n  switch (field.type as FieldType | string) {\n    case FieldType.UID:\n    case FieldType.Color:\n    case FieldType.Select:\n    case FieldType.Text: {\n      const type = GraphQLType.String\n      enqueueTypePath([...path, apiId], type)\n      return type\n    }\n\n    case FieldType.Boolean: {\n      const type = GraphQLType.Boolean\n      enqueueTypePath([...path, apiId], type)\n      return type\n    }\n\n    case FieldType.StructuredText: {\n      const type = GraphQLType.StructuredText\n      enqueueTypePath([...path, apiId], type)\n      return type\n    }\n\n    case FieldType.Number: {\n      const type = GraphQLType.Float\n      enqueueTypePath([...path, apiId], type)\n      return type\n    }\n\n    case FieldType.Date:\n    case FieldType.Timestamp: {\n      const type = GraphQLType.Date\n      enqueueTypePath([...path, apiId], type)\n      return { type, extensions: { dateformat: {} } }\n    }\n\n    case FieldType.GeoPoint: {\n      const type = GraphQLType.GeoPoint\n      enqueueTypePath([...path, apiId], type)\n      return type\n    }\n\n    case FieldType.Embed: {\n      const type = GraphQLType.Embed\n      enqueueTypePath([...path, apiId], type)\n      return type\n    }\n\n    case FieldType.Image: {\n      const type = GraphQLType.Image\n      enqueueTypePath([...path, apiId], type)\n\n      const thumbnails = (field as ImageFieldSchema)?.config?.thumbnails\n      if (thumbnails)\n        for (const thumbnail of thumbnails)\n          enqueueTypePath(\n            [...path, apiId, 'thumbnails', thumbnail.name],\n            GraphQLType.ImageThumbnail,\n          )\n\n      return type\n    }\n\n    case FieldType.Link: {\n      const type = GraphQLType.Link\n      enqueueTypePath([...path, apiId], type)\n      return type\n    }\n\n    case FieldType.Group: {\n      const groupTypeName = buildSchemaTypeName(\n        `${customTypeApiId} ${apiId} GroupType`,\n      )\n      enqueueTypeDef(\n        gatsbySchema.buildObjectType({\n          name: groupTypeName,\n          fields: mapObjVals(\n            (subfield, subfieldApiId) =>\n              fieldToType(subfieldApiId, subfield, [...path, apiId], context),\n            (field as GroupFieldSchema).config.fields,\n          ) as { [key: string]: GraphQLType },\n          extensions: { infer: false },\n        }),\n      )\n\n      const type = `[${groupTypeName}]`\n      enqueueTypePath([...path, apiId], type)\n      return type\n    }\n\n    case FieldType.Slices: {\n      const slicesTypeName = buildSchemaTypeName(\n        `${customTypeApiId} ${apiId} SlicesType`,\n      )\n      const sliceChoices = (field as SlicesFieldSchema).config.choices\n      const sliceChoiceTypes = Object.entries(sliceChoices).map(\n        ([sliceChoiceApiId, sliceChoice]) =>\n          fieldToType(sliceChoiceApiId, sliceChoice, [...path, apiId], {\n            ...context,\n            sliceZoneId: apiId,\n          }),\n      )\n\n      enqueueTypeDef(\n        gatsbySchema.buildUnionType({\n          name: slicesTypeName,\n          types: sliceChoiceTypes as string[],\n        }),\n      )\n\n      const type = `[${slicesTypeName}]`\n      enqueueTypePath([...path, apiId], type)\n      return {\n        type,\n        resolve: (parent: SliceIDsField, _args: any, context: any, info: any) =>\n          context.nodeModel.getNodesByIds({ ids: parent[info.path.key] }),\n      }\n    }\n\n    case FieldType.Slice: {\n      const {\n        'non-repeat': primaryFields,\n        repeat: itemsFields,\n      } = field as SliceFieldSchema\n\n      const sliceFieldTypes: { [key: string]: string } = {\n        slice_type: `${GraphQLType.String}!`,\n        slice_label: GraphQLType.String,\n      }\n\n      if (primaryFields && !isEmptyObj(primaryFields)) {\n        const primaryTypeName = buildSchemaTypeName(\n          `${customTypeApiId} ${sliceZoneId} ${apiId} PrimaryType`,\n        )\n\n        enqueueTypeDef(\n          gatsbySchema.buildObjectType({\n            name: primaryTypeName,\n            fields: mapObjVals(\n              (primaryField, primaryFieldApiId) =>\n                fieldToType(\n                  primaryFieldApiId,\n                  primaryField,\n                  [...path, apiId, 'primary'],\n                  context,\n                ),\n              primaryFields,\n            ) as { [key: string]: GraphQLType },\n          }),\n        )\n\n        enqueueTypePath([...path, apiId, 'primary'], primaryTypeName)\n        sliceFieldTypes.primary = primaryTypeName\n      }\n\n      if (itemsFields && !isEmptyObj(itemsFields)) {\n        const itemTypeName = buildSchemaTypeName(\n          `${customTypeApiId} ${sliceZoneId} ${apiId} ItemType`,\n        )\n\n        enqueueTypeDef(\n          gatsbySchema.buildObjectType({\n            name: itemTypeName,\n            fields: mapObjVals(\n              (itemField, itemFieldApiId) =>\n                fieldToType(\n                  itemFieldApiId,\n                  itemField,\n                  [...path, apiId, 'items'],\n                  context,\n                ),\n              itemsFields,\n            ) as { [key: string]: GraphQLType },\n          }),\n        )\n\n        const type = `[${itemTypeName}]`\n        enqueueTypePath([...path, apiId, 'items'], type)\n        sliceFieldTypes.items = type\n      }\n\n      const type = buildSchemaTypeName(\n        `${customTypeApiId} ${sliceZoneId} ${apiId}`,\n      )\n\n      enqueueTypeDef(\n        gatsbySchema.buildObjectType({\n          name: type,\n          fields: sliceFieldTypes,\n          interfaces: ['PrismicSliceType', 'Node'],\n          extensions: { infer: false },\n        }),\n      )\n\n      enqueueTypePath([...path, apiId], type)\n      return type\n    }\n\n    // Internal plugin-specific field not defined in the Prismic schema.\n    case FieldType.AlternateLanguages: {\n      // The types are intentionally different here. We need to handle\n      // AlternateLanguages in a unique way in `documentToNodes.js`.\n      enqueueTypePath([...path, apiId], FieldType.AlternateLanguages)\n      return `[${GraphQLType.Link}!]!`\n    }\n\n    default: {\n      const fieldPath = [...path, apiId].join('.')\n      reporter.warn(\n        msg(\n          `Unsupported field type \"${field.type}\" detected for field \"${fieldPath}\". JSON type will be used.`,\n        ),\n      )\n\n      const type = GraphQLType.JSON\n      enqueueTypePath([...path, apiId], type)\n      return type\n    }\n  }\n}\n\nconst schemaToTypeDefs = (\n  apiId: string,\n  schema: Schema,\n  context: SchemasToTypeDefsContext,\n) => {\n  const { enqueueTypeDef, enqueueTypePath, gatsbyContext } = context\n  const { schema: gatsbySchema } = gatsbyContext\n\n  // UID fields are defined at the same level as data fields, but are a level\n  // above data in API responses. Pulling it out separately here allows us to\n  // process the UID field differently than the data fields.\n  const { uid: uidField, ...dataFields } = Object.values(schema).reduce(\n    (acc, tab) => {\n      for (const fieldApiId in tab) acc[fieldApiId] = tab[fieldApiId]\n      return acc\n    },\n    {},\n  )\n\n  // UID fields must be conditionally processed since not all custom types\n  // implement a UID field.\n  let uidFieldType: string | undefined\n  if (uidField)\n    uidFieldType = fieldToType('uid', uidField, [apiId], context) as string\n\n  // The alternate languages field acts as a list of Link fields. Note:\n  // AlternateLanguages is an internal plugin-specific type, not from Prismic.\n  const alternateLanguagesFieldType = fieldToType(\n    'alternate_languages',\n    { type: FieldType.AlternateLanguages } as BaseFieldSchema,\n    [apiId],\n    context,\n  )\n\n  // Create a type for all data fields.\n  const dataTypeName = buildSchemaTypeName(`${apiId} DataType`)\n  enqueueTypePath([apiId, 'data'], dataTypeName)\n  enqueueTypeDef(\n    gatsbySchema.buildObjectType({\n      name: dataTypeName,\n      fields: mapObjVals(\n        (dataField, dataFieldApiId) =>\n          fieldToType(dataFieldApiId, dataField, [apiId, 'data'], context),\n        dataFields,\n      ) as { [key: string]: GraphQLType },\n      extensions: { infer: false },\n    }),\n  )\n\n  // Create the main schema type.\n  const schemaTypeName = buildSchemaTypeName(apiId)\n  const schemaFieldTypes: {\n    [key: string]: GraphQLTypeObj | GraphQLType | string\n  } = {\n    data: dataTypeName,\n    dataRaw: `${GraphQLType.JSON}!`,\n    dataString: `${GraphQLType.String}!`,\n    first_publication_date: {\n      type: `${GraphQLType.Date}!`,\n      extensions: { dateformat: {} },\n    },\n    href: `${GraphQLType.String}!`,\n    url: GraphQLType.String,\n    lang: `${GraphQLType.String}!`,\n    last_publication_date: {\n      type: `${GraphQLType.Date}!`,\n      extensions: { dateformat: {} },\n    },\n    tags: `[${GraphQLType.String}!]!`,\n    alternate_languages: alternateLanguagesFieldType as string,\n    type: `${GraphQLType.String}!`,\n    prismicId: `${GraphQLType.ID}!`,\n    _previewable: `${GraphQLType.ID}!`,\n  }\n  if (uidFieldType) schemaFieldTypes.uid = uidFieldType\n\n  enqueueTypePath([apiId], schemaTypeName)\n  enqueueTypeDef(\n    gatsbySchema.buildObjectType({\n      name: schemaTypeName,\n      fields: schemaFieldTypes as { [key: string]: GraphQLType },\n      interfaces: ['PrismicDocument', 'Node'],\n      extensions: { infer: false },\n    }),\n  )\n}\n\n/**\n * Returns an GraphQL type containing all image thumbnail field names. If no thumbnails are configured, a placeholder type is returned.\n *\n * @param typePaths Array of TypePaths for all schemas.\n * @param gatsbySchema Gatsby node schema.\n *\n * @returns GraphQL type to support image thumbnail fields.\n */\nconst buildImageThumbnailsType = (\n  typePaths: TypePath[],\n  gatsbySchema: NodePluginSchema,\n) => {\n  const keys = typePaths\n    .filter((typePath) => typePath.type === GraphQLType.ImageThumbnail)\n    .map((typePath) => typePath.path[typePath.path.length - 1])\n\n  if (keys.length < 1)\n    return gatsbySchema.buildScalarType({\n      name: GraphQLType.ImageThumbnails,\n      serialize: () => null,\n    })\n\n  const fieldTypes = keys.reduce((acc, key) => {\n    acc[key] = GraphQLType.ImageThumbnail\n    return acc\n  }, {} as { [key: string]: GraphQLType.ImageThumbnail })\n\n  return gatsbySchema.buildObjectType({\n    name: GraphQLType.ImageThumbnails,\n    fields: fieldTypes,\n  })\n}\n\n/**\n * Converts an object mapping custom type API IDs to JSON schemas to an array\n * of GraphQL type definitions. The result is intended to be called with\n * Gatsby's `createTypes` action.\n *\n * @param schemas An object mapping custom type API IDs to JSON schemas.\n *\n * @returns An array of GraphQL type definitions.\n */\nexport const schemasToTypeDefs = (\n  schemas: Schemas,\n  gatsbyContext: SourceNodesArgs,\n) => {\n  const { schema: gatsbySchema } = gatsbyContext\n\n  const typeDefs: GatsbyGraphQLType[] = []\n  const enqueueTypeDef: EnqueueTypeDef = (typeDef) =>\n    void typeDefs.push(typeDef)\n\n  const typePaths: TypePath[] = []\n  const enqueueTypePath: EnqueueTypePath = (path, type) =>\n    void typePaths.push({ path, type })\n\n  const context = { gatsbyContext, enqueueTypeDef, enqueueTypePath }\n\n  for (const apiId in schemas)\n    schemaToTypeDefs(apiId, schemas[apiId], {\n      ...context,\n      customTypeApiId: apiId,\n    })\n\n  // Union type for all schemas.\n  enqueueTypeDef(\n    gatsbySchema.buildUnionType({\n      name: GraphQLType.AllDocumentTypes,\n      types: Object.keys(schemas).map((apiId) => buildSchemaTypeName(apiId)),\n    }),\n  )\n\n  // Type for all image thumbnail fields.\n  enqueueTypeDef(buildImageThumbnailsType(typePaths, gatsbySchema))\n\n  return { typeDefs, typePaths }\n}\n","export const BROWSER_STORE_KEY = '__GATSBY_SOURCE_PRISMIC__'\n\nexport const IMAGE_FIELD_KEYS = [\n  'alt',\n  'copyright',\n  'dimensions',\n  'url',\n] as const\n\nexport const API_PAGE_SIZE = 100\n\nexport const UUID_NAMESPACE = `638f7a53-c567-4eca-8fc1-b23efb1cfb2b`\n\nexport const PLACEHOLDER_NODE_TYPE_SUFFIX = '__PLACEHOLDER'\n","import { getApi } from 'prismic-javascript'\n\nimport { msg } from './utils'\nimport { API_PAGE_SIZE } from './constants'\n\nimport { SourceNodesArgs, Reporter } from 'gatsby'\nimport PrismicResolvedApi, {\n  QueryOptions,\n} from 'prismic-javascript/d.ts/ResolvedApi'\nimport { Document as PrismicDocument } from 'prismic-javascript/d.ts/documents'\nimport { PluginOptions } from './types'\n\nexport const createClient = async (\n  repositoryName: string,\n  accessToken?: string,\n) =>\n  await getApi(`https://${repositoryName}.prismic.io/api/v2`, { accessToken })\n\nconst pagedGet = async (\n  client: PrismicResolvedApi,\n  queryOptions: QueryOptions,\n  page: number,\n  pageSize: number,\n  documents: PrismicDocument[],\n  reporter: Reporter,\n): Promise<PrismicDocument[]> => {\n  reporter.verbose(msg(`fetching documents page ${page}`))\n\n  const response = await client.query([], { ...queryOptions, page, pageSize })\n\n  for (const doc of response.results) documents.push(doc)\n\n  if (page * pageSize < response.total_results_size)\n    return await pagedGet(\n      client,\n      queryOptions,\n      page + 1,\n      pageSize,\n      documents,\n      reporter,\n    )\n\n  return documents\n}\n\nexport const fetchAllDocuments = async (\n  pluginOptions: PluginOptions,\n  gatsbyContext: SourceNodesArgs,\n) => {\n  const {\n    repositoryName,\n    releaseID,\n    accessToken,\n    fetchLinks,\n    lang,\n  } = pluginOptions\n  const { reporter } = gatsbyContext\n\n  const client = await createClient(repositoryName, accessToken)\n\n  const queryOptions: QueryOptions = {}\n  if (releaseID) {\n    const ref = client.refs.find((r) => r.id === releaseID)\n    if (ref) {\n      queryOptions.ref = ref.ref\n    } else {\n      reporter.warn(\n        msg(\n          `A release with ID \"${releaseID}\" was not found. Defaulting to the master ref instead.`,\n        ),\n      )\n    }\n  }\n  if (fetchLinks) queryOptions.fetchLinks = fetchLinks\n  if (lang) queryOptions.lang = lang\n\n  return await pagedGet(client, queryOptions, 1, API_PAGE_SIZE, [], reporter)\n}\n","import pick from 'lodash.pick'\nimport omit from 'lodash.omit'\n\nimport { mapObjValsP, buildSchemaTypeName } from './utils'\nimport { IMAGE_FIELD_KEYS } from './constants'\n\nimport { Document as PrismicDocument } from 'prismic-javascript/d.ts/documents'\nimport {\n  DocumentsToNodesEnvironment,\n  TypePath,\n  Field,\n  AlternateLanguagesField,\n  GroupField,\n  ImageField,\n  LinkField,\n  SlicesField,\n  StructuredTextField,\n  NormalizedField,\n  NormalizedAlternateLanguagesField,\n  LinkFieldType,\n  GraphQLType,\n  LinkResolver,\n  DocumentNodeInput,\n  SliceNodeInput,\n} from './types'\n\nconst getTypeForPath = (\n  path: TypePath['path'],\n  typePaths: TypePath[],\n): GraphQLType | string | undefined => {\n  const stringifiedPath = JSON.stringify(path)\n  const def = typePaths.find((x) => JSON.stringify(x.path) === stringifiedPath)\n\n  if (!def) return\n  if (/^\\[.*GroupType\\]$/.test(def.type)) return GraphQLType.Group\n  if (/^\\[.*SlicesType\\]$/.test(def.type)) return GraphQLType.Slices\n\n  return def.type\n}\n\nconst normalizeField = async (\n  apiId: string,\n  field: Field,\n  path: TypePath['path'],\n  doc: PrismicDocument,\n  env: DocumentsToNodesEnvironment,\n): Promise<NormalizedField> => {\n  const {\n    createNodeId,\n    createNode,\n    createContentDigest,\n    typePaths,\n    normalizeStructuredTextField,\n    normalizeLinkField,\n    normalizeImageField,\n    normalizeSlicesField,\n  } = env\n\n  const type = getTypeForPath([...path, apiId], typePaths)\n\n  switch (type) {\n    case GraphQLType.Image: {\n      const baseObj: ImageField = pick(field as ImageField, IMAGE_FIELD_KEYS)\n      const thumbsObj = omit(field as ImageField, IMAGE_FIELD_KEYS) as {\n        [key: string]: ImageField\n      }\n\n      const base = await normalizeImageField(apiId, baseObj, path, doc, env)\n      const thumbs = await mapObjValsP(\n        async (thumb) =>\n          await normalizeImageField(apiId, thumb, path, doc, env),\n        thumbsObj,\n      )\n\n      return { ...base, thumbnails: thumbs }\n    }\n\n    case GraphQLType.StructuredText: {\n      return await normalizeStructuredTextField(\n        apiId,\n        field as StructuredTextField,\n        path,\n        doc,\n        env,\n      )\n    }\n\n    case GraphQLType.Link: {\n      return await normalizeLinkField(apiId, field as LinkField, path, doc, env)\n    }\n\n    case GraphQLType.Group: {\n      return await normalizeObjs(\n        field as GroupField,\n        [...path, apiId],\n        doc,\n        env,\n      )\n    }\n\n    case GraphQLType.Slices: {\n      const sliceNodeIds = await Promise.all(\n        (field as SlicesField).map(async (slice, index) => {\n          const sliceNodeId = createNodeId(\n            `${doc.type} ${doc.id} ${apiId} ${index}`,\n          )\n\n          const normalizedPrimary = await normalizeObj(\n            slice.primary,\n            [...path, apiId, slice.slice_type, 'primary'],\n            doc,\n            env,\n          )\n\n          const normalizedItems = await normalizeObjs(\n            slice.items,\n            [...path, apiId, slice.slice_type, 'items'],\n            doc,\n            env,\n          )\n\n          const node: SliceNodeInput = {\n            id: sliceNodeId,\n            slice_type: slice.slice_type,\n            slice_label: slice.slice_label ?? undefined,\n            primary: normalizedPrimary,\n            items: normalizedItems,\n            internal: {\n              type: buildSchemaTypeName(\n                `${doc.type} ${apiId} ${slice.slice_type}`,\n              ),\n              contentDigest: createContentDigest(slice),\n            },\n          }\n\n          createNode(node)\n\n          return node.id\n        }),\n      )\n\n      return await normalizeSlicesField(\n        apiId,\n        sliceNodeIds,\n        [...path, apiId],\n        doc,\n        env,\n      )\n    }\n\n    // This field type is not an actual Prismic type and was assigned manually\n    // in `schemasToTypeDefs.ts`.\n    case GraphQLType.AlternateLanguages: {\n      // Treat the array of alternate language documents as a list of link\n      // fields. We need to force the link type to a Document since it is not\n      // there by default.\n      return await Promise.all(\n        (field as AlternateLanguagesField).map(\n          async (item) =>\n            await normalizeLinkField(\n              apiId,\n              {\n                ...item,\n                link_type: LinkFieldType.Document,\n              },\n              path,\n              doc,\n              env,\n            ),\n        ),\n      )\n    }\n\n    default: {\n      return field\n    }\n  }\n}\n\nconst normalizeObj = (\n  obj: { [key: string]: Field } = {},\n  path: TypePath['path'],\n  doc: PrismicDocument,\n  env: DocumentsToNodesEnvironment,\n): Promise<{ [key: string]: NormalizedField }> =>\n  mapObjValsP(\n    (field, fieldApiId) => normalizeField(fieldApiId, field, path, doc, env),\n    obj,\n  )\n\nconst normalizeObjs = (\n  objs: { [key: string]: Field }[] = [],\n  path: TypePath['path'],\n  doc: PrismicDocument,\n  env: DocumentsToNodesEnvironment,\n) => Promise.all(objs.map((obj) => normalizeObj(obj, path, doc, env)))\n\nexport const documentToNodes = async (\n  doc: PrismicDocument,\n  env: DocumentsToNodesEnvironment,\n) => {\n  const { createNode, createContentDigest, createNodeId, pluginOptions } = env\n  const { linkResolver } = pluginOptions\n\n  let linkResolverForDoc: LinkResolver | undefined = undefined\n  if (linkResolver) linkResolverForDoc = linkResolver({ node: doc })\n\n  const docNodeId = createNodeId(`${doc.type} ${doc.id}`)\n  const docUrl = linkResolverForDoc ? linkResolverForDoc(doc) : undefined\n\n  const normalizedData = await normalizeObj(\n    doc.data,\n    [doc.type, 'data'],\n    doc,\n    env,\n  )\n  const normalizedAlernativeLanguages = (await normalizeField(\n    'alternate_languages',\n    (doc.alternate_languages as unknown) as AlternateLanguagesField,\n    [doc.type],\n    doc,\n    env,\n  )) as NormalizedAlternateLanguagesField\n\n  const node: DocumentNodeInput = {\n    ...doc,\n    id: docNodeId,\n    prismicId: doc.id,\n    data: normalizedData,\n    dataString: JSON.stringify(doc.data),\n    dataRaw: doc.data,\n    alternate_languages: normalizedAlernativeLanguages,\n    url: docUrl,\n    internal: {\n      type: buildSchemaTypeName(doc.type),\n      contentDigest: createContentDigest(doc),\n    },\n    _previewable: doc.id,\n  }\n\n  createNode(node)\n\n  return node.id\n}\n\nexport const documentsToNodes = async (\n  docs: PrismicDocument[],\n  env: DocumentsToNodesEnvironment,\n) => await Promise.all(docs.map((doc) => documentToNodes(doc, env)))\n","import {\n  Link as PrismicDOMLink,\n  RichText as PrismicDOMRichText,\n} from 'prismic-dom'\nimport { createRemoteFileNode } from 'gatsby-source-filesystem'\n\nimport { msg } from './utils'\n\nimport { SourceNodesArgs } from 'gatsby'\nimport {\n  DocumentsToNodesEnvironment,\n  DocumentsToNodesEnvironmentNodeContext,\n  HTMLSerializer,\n  ImageFieldNormalizer,\n  LinkFieldNormalizer,\n  LinkFieldType,\n  LinkResolver,\n  NodeID,\n  PluginOptions,\n  SlicesFieldNormalizer,\n  StructuredTextFieldNormalizer,\n  TypePath,\n} from './types'\n\nconst normalizeImageField: ImageFieldNormalizer = async (\n  apiId,\n  field,\n  _path,\n  doc,\n  env,\n) => {\n  const { createNode, createNodeId, pluginOptions, context } = env\n  const { gatsbyContext } = context as DocumentsToNodesEnvironmentNodeContext\n  const { store, cache, actions, reporter } = gatsbyContext\n  const { touchNode } = actions\n  let { shouldDownloadImage } = pluginOptions\n\n  let shouldAttemptToCreateRemoteFileNode = true\n  if (shouldDownloadImage)\n    shouldAttemptToCreateRemoteFileNode = await shouldDownloadImage({\n      key: apiId,\n      value: field,\n      node: doc,\n    })\n\n  if (!shouldAttemptToCreateRemoteFileNode || !field.url) return field\n\n  let fileNodeID: NodeID | undefined = undefined\n  const cachedImageDataKey = `prismic-image-${field.url}`\n  const cachedImageData: { fileNodeID: string } = await cache.get(\n    cachedImageDataKey,\n  )\n\n  if (cachedImageData) {\n    fileNodeID = cachedImageData.fileNodeID\n    touchNode({ nodeId: fileNodeID })\n  } else {\n    try {\n      const fullQualityUrl = new URL(field.url)\n      // Remove auto parameter to download the original, full-quality image\n      // from Imgix. Prismic automatically adds `auto=format,compress`, which,\n      // when compounded with Sharp's compression, results in a doubly\n      // compressed image.\n      fullQualityUrl.searchParams.delete('auto')\n\n      const fileNode = await createRemoteFileNode({\n        url: fullQualityUrl.toString(),\n        store,\n        cache,\n        createNode,\n        createNodeId,\n        reporter,\n      })\n\n      if (fileNode) {\n        fileNodeID = fileNode.id\n        await cache.set(cachedImageDataKey, { fileNodeID })\n      }\n    } catch (error) {\n      reporter.error(\n        msg(`failed to create image node with URL: ${field.url}`),\n        new Error(error),\n      )\n    }\n  }\n\n  return { ...field, localFile: fileNodeID }\n}\n\nconst normalizeLinkField: LinkFieldNormalizer = (\n  apiId,\n  field,\n  _path,\n  doc,\n  env,\n) => {\n  const { createNodeId, pluginOptions } = env\n  const { linkResolver } = pluginOptions\n\n  let linkResolverForField: LinkResolver | undefined = undefined\n  if (linkResolver)\n    linkResolverForField = linkResolver({\n      key: apiId,\n      value: field,\n      node: doc,\n    })\n\n  let linkedDocId: NodeID | undefined = undefined\n  if (field.link_type === LinkFieldType.Document)\n    linkedDocId = createNodeId(`${field.type} ${field.id}`)\n\n  return {\n    ...field,\n    url: PrismicDOMLink.url(field, linkResolverForField),\n    document: linkedDocId,\n    raw: field,\n  }\n}\n\nconst normalizeSlicesField: SlicesFieldNormalizer = (\n  _apiId,\n  field,\n  _path,\n  _doc,\n  _env,\n) => field\n\nconst normalizeStructuredTextField: StructuredTextFieldNormalizer = (\n  apiId,\n  field,\n  _path,\n  doc,\n  env,\n) => {\n  const { pluginOptions } = env\n  const { linkResolver, htmlSerializer } = pluginOptions\n\n  let linkResolverForField: LinkResolver | undefined = undefined\n  if (linkResolver)\n    linkResolverForField = linkResolver({\n      key: apiId,\n      value: field,\n      node: doc,\n    })\n\n  let htmlSerializerForField: HTMLSerializer | undefined = undefined\n  if (htmlSerializer)\n    htmlSerializerForField = htmlSerializer({\n      key: apiId,\n      value: field,\n      node: doc,\n    })\n\n  return {\n    html: PrismicDOMRichText.asHtml(\n      field,\n      linkResolverForField,\n      htmlSerializerForField,\n    ),\n    text: PrismicDOMRichText.asText(field),\n    raw: field,\n  }\n}\n\nexport const createEnvironment = (\n  pluginOptions: PluginOptions,\n  gatsbyContext: SourceNodesArgs,\n  typePaths: TypePath[],\n): DocumentsToNodesEnvironment => {\n  const { actions, createNodeId, createContentDigest } = gatsbyContext\n  const { createNode } = actions\n\n  return {\n    createNode,\n    createNodeId: (input: string) => createNodeId(input),\n    createContentDigest,\n    normalizeImageField,\n    normalizeLinkField,\n    normalizeSlicesField,\n    normalizeStructuredTextField,\n    typePaths,\n    pluginOptions,\n    context: { gatsbyContext },\n  }\n}\n","import { NodePluginSchema, GatsbyCache } from 'gatsby'\nimport { ImgixUrlParams } from 'gatsby-plugin-imgix'\nimport {\n  createImgixFixedType,\n  createImgixFluidType,\n  createImgixFixedSchemaFieldConfig,\n  createImgixFluidSchemaFieldConfig,\n  createImgixUrlSchemaFieldConfig,\n} from 'gatsby-plugin-imgix/dist/node'\n\ninterface PartialPrismicImageType {\n  url?: string\n  dimensions?: {\n    width: number\n    height: number\n  }\n}\n\ntype BuildPrismicImageTypesArgs = {\n  schema: NodePluginSchema\n  cache: GatsbyCache\n  defaultImgixParams?: ImgixUrlParams\n  defaultPlaceholderImgixParams?: ImgixUrlParams\n}\n\nexport const buildPrismicImageTypes = ({\n  schema,\n  cache,\n  defaultImgixParams,\n  defaultPlaceholderImgixParams,\n}: BuildPrismicImageTypesArgs) => {\n  const resolveUrl = (obj: PartialPrismicImageType) => obj.url\n  const resolveWidth = (obj: PartialPrismicImageType) => obj.dimensions?.width\n  const resolveHeight = (obj: PartialPrismicImageType) => obj.dimensions?.height\n\n  const PrismicImageFixedType = createImgixFixedType({\n    name: 'PrismicImageFixedType',\n    cache,\n  })\n\n  const PrismicImageFluidType = createImgixFluidType({\n    name: 'PrismicImageFluidType',\n    cache,\n  })\n\n  const PrismicImageType = schema.buildObjectType({\n    name: 'PrismicImageType',\n    description: 'An image field with optional constrained thumbnails.',\n    interfaces: ['PrismicImageInterface'],\n    fields: {\n      alt: 'String',\n      copyright: 'String',\n      dimensions: 'PrismicImageDimensionsType',\n      url: createImgixUrlSchemaFieldConfig({\n        resolveUrl,\n        defaultImgixParams,\n      }),\n      fixed: createImgixFixedSchemaFieldConfig({\n        type: PrismicImageFixedType,\n        resolveUrl,\n        resolveWidth,\n        resolveHeight,\n        cache,\n        defaultImgixParams,\n        defaultPlaceholderImgixParams,\n      }),\n      fluid: createImgixFluidSchemaFieldConfig({\n        type: PrismicImageFluidType,\n        resolveUrl,\n        resolveWidth,\n        resolveHeight,\n        cache,\n        defaultImgixParams,\n        defaultPlaceholderImgixParams,\n      }),\n      localFile: {\n        type: 'File',\n        extensions: { link: {} },\n      },\n      thumbnails: 'PrismicImageThumbnailsType',\n    },\n  })\n\n  const PrismicImageThumbnailType = schema.buildObjectType({\n    name: 'PrismicImageThumbnailType',\n    description: 'An image thumbnail with constraints.',\n    interfaces: ['PrismicImageInterface'],\n    fields: {\n      alt: 'String',\n      copyright: 'String',\n      dimensions: 'PrismicImageDimensionsType',\n      url: createImgixUrlSchemaFieldConfig({\n        resolveUrl,\n        defaultImgixParams,\n      }),\n      fixed: createImgixFixedSchemaFieldConfig({\n        type: PrismicImageFixedType,\n        resolveUrl,\n        resolveWidth,\n        resolveHeight,\n        cache,\n        defaultImgixParams,\n      }),\n      fluid: createImgixFluidSchemaFieldConfig({\n        type: PrismicImageFluidType,\n        resolveUrl,\n        resolveWidth,\n        resolveHeight,\n        cache,\n        defaultImgixParams,\n      }),\n      localFile: {\n        type: 'File',\n        extensions: { link: {} },\n      },\n    },\n  })\n\n  // The following types must be separated to in order to pass them separately\n  // to two different `createTypes` calls in gatsby-node.ts. `createTypes`\n  // requires that all passed types are of the same class.\n  return [\n    // Imgix GraphQLObjectType instances\n    [PrismicImageFixedType, PrismicImageFluidType],\n    // Prismic GatsbyGraphQLObjectType instances\n    [PrismicImageType, PrismicImageThumbnailType],\n  ]\n}\n\nconst gql = (query: TemplateStringsArray) => String(query).replace(`\\n`, ` `)\n\nexport const types = gql`\n  \"A text field with formatting options.\"\n  type PrismicStructuredTextType {\n    \"The HTML value of the text using \\`prismic-dom\\` and the HTML serializer.\"\n    html: String\n    \"The plain text value of the text using \\`prismic-dom\\`.\"\n    text: String\n    \"The field's value without transformations exactly as it comes from the Prismic API.\"\n    raw: JSON\n  }\n\n  \"A field for storing geo-coordinates.\"\n  type PrismicGeoPointType {\n    \"The latitude value of the geo-coordinate.\"\n    latitude: Float\n    \"The longitude value of the geo-coordinate.\"\n    longitude: Float\n  }\n\n  \"Embed videos, songs, tweets, slices, etc.\"\n  type PrismicEmbedType {\n    \"The ID of the resource author. Fetched via oEmbed data.\"\n    author_id: ID\n    \"The name of the author/owner of the resource. Fetched via oEmbed data.\"\n    author_name: String\n    \"A URL for the author/owner of the resource. Fetched via oEmbed data.\"\n    author_url: String\n    \"The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not. Fetched via oEmbed data.\"\n    cache_age: String\n    \"The URL of the resource.\"\n    embed_url: String\n    \"The HTML required to display the resource. The HTML should have no padding or margins. Consumers may wish to load the HTML in an off-domain iframe to avoid XSS vulnerabilities. Fetched via oEmbed data.\"\n    html: String\n    \"The name of the resource.\"\n    name: String\n    \"The name of the resource provider. Fetched via oEmbed data.\"\n    provider_name: String\n    \"The URL of the resource provider. Fetched via oEmbed data.\"\n    provider_url: String\n    \"The width of the resource's thumbnail. Fetched via oEmbed data.\"\n    thumbnail_height: Int\n    \"A URL to a thumbnail image representing the resource. Fetched via oEmbed data.\"\n    thumbnail_url: String\n    \"The width of the resource's thumbnail. Fetched via oEmbed data.\"\n    thumbnail_width: Int\n    \"A text title, describing the resource. Fetched via oEmbed data.\"\n    title: String\n    \"The resource type. Fetched via oEmbed data.\"\n    type: String\n    \"The oEmbed version number.\"\n    version: String\n    \"The source URL of the resource. Fetched via oEmbed data.\"\n    url: String\n    \"The width in pixel of the resource. Fetched via oEmbed data.\"\n    width: Int\n    \"The height in pixel of the resource. Fetched via oEmbed data.\"\n    height: Int\n    \"The ID of the resource media. Fetched via oEmbed data.\"\n    media_id: ID\n    \"A description for the resource.\"\n    description: String\n  }\n\n  \"Dimensions for images.\"\n  type PrismicImageDimensionsType {\n    \"Width of the image in pixels.\"\n    width: Int!\n    \"Height of the image in pixels.\"\n    height: Int!\n  }\n\n  \"Types of links.\"\n  enum PrismicLinkTypes {\n    \"Any of the other types\"\n    Any\n    \"Internal content\"\n    Document\n    \"Internal media content\"\n    Media\n    \"URL\"\n    Web\n  }\n\n  \"Link to web, media, and internal content.\"\n  type PrismicLinkType {\n    \"The type of link.\"\n    link_type: PrismicLinkTypes!\n    \"If a Document link, \\`true\\` if linked document does not exist, \\`false\\` otherwise.\"\n    isBroken: Boolean\n    \"The document's URL derived via the link resolver.\"\n    url: String\n    \"The link's target.\"\n    target: String\n    \"If a Media link, the size of the file.\"\n    size: Int\n    \"If a Document link, the linked document's Prismic ID.\"\n    id: ID\n    \"If a Document link, the linked document's Prismic custom type API ID\"\n    type: String\n    \"If a Document link, the linked document's list of tags.\"\n    tags: [String]\n    \"If a Document link, the linked document's language.\"\n    lang: String\n    \"If a Document link, the linked document's slug.\"\n    slug: String\n    \"If a Document link, the linked document's UID.\"\n    uid: String\n    \"If a Document link, the linked document.\"\n    document: PrismicAllDocumentTypes @link\n    \"The field's value without transformations exactly as it comes from the Prismic API.\"\n    raw: JSON\n  }\n\n  interface PrismicSliceType {\n    \"The slice type API ID.\"\n    slice_type: String!\n\n    \"The slice label.\"\n    slice_label: String\n  }\n\n  interface PrismicImageInterface {\n    \"The image's alternative text.\"\n    alt: String\n    \"The image's copyright text.\"\n    copyright: String\n    \"The image's dimensions.\"\n    dimensions: PrismicImageDimensionsType\n    \"The image's URL on Prismic's CDN.\"\n    url: String\n    \"The locally downloaded image if \\`shouldNormalizeImage\\` returns true.\"\n    localFile: File\n    fixed: PrismicImageFixedType\n    fluid: PrismicImageFluidType\n  }\n\n  interface PrismicDocument {\n    \"The document's data object without transformations exactly as it comes from the Prismic API.\"\n    dataRaw: JSON!\n    \"The document's data object without transformations. The object is stringified via \\`JSON.stringify\\` to eliminate the need to declare subfields.\"\n    dataString: String\n      @deprecated(reason: \"Use \\`dataRaw\\` instead which returns JSON.\")\n    \"The document's initial publication date.\"\n    first_publication_date(\n      \"Format the date using Moment.js' date tokens, e.g. \\`date(formatString: \\\\\"YYYY MMMM DD\\\\\")\\`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.\"\n      formatString: String\n      \"Returns a string generated with Moment.js' \\`fromNow\\` function\"\n      fromNow: Boolean\n      \"Returns the difference between this date and the current time. Defaults to \\\\\"milliseconds\\\\\" but you can also pass in as the measurement \\\\\"years\\\\\", \\\\\"months\\\\\", \\\\\"weeks\\\\\", \\\\\"days\\\\\", \\\\\"hours\\\\\", \\\\\"minutes\\\\\", and \\\\\"seconds\\\\\".\"\n      difference: String\n      \"Configures the locale Moment.js will use to format the date.\"\n      locale: String\n    ): Date\n    \"The document's Prismic API URL.\"\n    href: String\n    \"The document's URL derived via the link resolver.\"\n    url: String\n    \"Globally unique identifier. Note that this differs from the \\`prismicID\\` field.\"\n    id: ID!\n    \"The document's language.\"\n    lang: String!\n    \"The document's most recent publication date\"\n    last_publication_date(\n      \"Format the date using Moment.js' date tokens, e.g. \\`date(formatString: \\\\\"YYYY MMMM DD\\\\\")\\`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.\"\n      formatString: String\n      \"Returns a string generated with Moment.js' \\`fromNow\\` function\"\n      fromNow: Boolean\n      \"Returns the difference between this date and the current time. Defaults to \\\\\"milliseconds\\\\\" but you can also pass in as the measurement \\\\\"years\\\\\", \\\\\"months\\\\\", \\\\\"weeks\\\\\", \\\\\"days\\\\\", \\\\\"hours\\\\\", \\\\\"minutes\\\\\", and \\\\\"seconds\\\\\".\"\n      difference: String\n      \"Configures the locale Moment.js will use to format the date.\"\n      locale: String\n    ): Date\n    \"The document's list of tags.\"\n    tags: [String!]!\n    \"Alternate languages for the document.\"\n    alternate_languages: [PrismicLinkType!]!\n    \"The document's Prismic API ID type.\"\n    type: String!\n    \"The document's Prismic ID.\"\n    prismicId: ID!\n    \"Marks the document as previewable using Prismic's preview system. Include this field if updates to the document should be previewable by content editors before publishing. **Note: the value of this field is not stable and should not be used directly**.\"\n    _previewable: ID!\n  }\n`\n","import fs from 'fs'\nimport path from 'path'\nimport md5 from 'md5'\n\nimport { validatePluginOptions } from './validateOptions'\nimport { schemasToTypeDefs } from './schemasToTypeDefs'\nimport { fetchAllDocuments } from './api'\nimport { documentsToNodes } from './documentsToNodes'\nimport { createEnvironment } from './environment.node'\nimport { types, buildPrismicImageTypes } from './gqlTypes'\nimport { msg } from './utils'\n\nimport { GatsbyNode, SourceNodesArgs } from 'gatsby'\nimport { PluginOptions } from './types'\n\nexport const sourceNodes: NonNullable<GatsbyNode['sourceNodes']> = async (\n  gatsbyContext: SourceNodesArgs,\n  pluginOptions: PluginOptions,\n) => {\n  const { actions, reporter, store, schema, cache } = gatsbyContext\n  const { createTypes } = actions\n  const { program } = store.getState()\n\n  const createTypesActivity = reporter.activityTimer(msg('create types'))\n  const fetchDocumentsActivity = reporter.activityTimer(msg('fetch documents'))\n  const createNodesActivity = reporter.activityTimer(msg('create nodes'))\n  const writeTypePathsActivity = reporter.activityTimer(\n    msg('write out type paths'),\n  )\n\n  /**\n   * Validate plugin options. Set default options where necessary. If any\n   * plugin options are invalid, stop immediately.\n   */\n  try {\n    pluginOptions = validatePluginOptions(pluginOptions)\n  } catch (error) {\n    reporter.error(msg('invalid plugin options'))\n    reporter.panic(error)\n  }\n\n  /**\n   * Create types derived from Prismic custom type schemas.\n   */\n  createTypesActivity.start()\n  reporter.verbose(msg('starting to create types'))\n\n  const { typeDefs, typePaths } = schemasToTypeDefs(\n    pluginOptions.schemas,\n    gatsbyContext,\n  )\n  const [imgixImageTypes, imageTypes] = buildPrismicImageTypes({\n    schema,\n    cache,\n    defaultImgixParams: pluginOptions.imageImgixParams,\n    defaultPlaceholderImgixParams: pluginOptions.imagePlaceholderImgixParams,\n  })\n  createTypes(typeDefs)\n  createTypes(imgixImageTypes)\n  createTypes(imageTypes)\n  createTypes(types)\n\n  createTypesActivity.end()\n\n  /**\n   * Fetch documents from Prismic.\n   */\n  fetchDocumentsActivity.start()\n  reporter.verbose(msg('starting to fetch documents'))\n\n  const documents = await fetchAllDocuments(pluginOptions, gatsbyContext)\n\n  reporter.verbose(msg(`fetched ${documents.length} documents`))\n  fetchDocumentsActivity.end()\n\n  /**\n   * Create nodes for all documents.\n   */\n  createNodesActivity.start()\n  reporter.verbose(msg('starting to create nodes'))\n\n  const env = createEnvironment(pluginOptions, gatsbyContext, typePaths)\n  // TODO: Implement queue like `schemasToTypeDefs` and create nodes here.\n  await documentsToNodes(documents, env)\n\n  createNodesActivity.end()\n\n  /**\n   * Write type paths to public for use in Prismic previews.\n   */\n  writeTypePathsActivity.start()\n  reporter.verbose(msg('starting to write out type paths'))\n\n  const schemasDigest = md5(JSON.stringify(pluginOptions.schemas))\n  const typePathsFilename = path.resolve(\n    program.directory,\n    'public',\n    [pluginOptions.typePathsFilenamePrefix, schemasDigest, '.json']\n      .filter((part) => part !== undefined && part !== null)\n      .join(''),\n  )\n\n  reporter.verbose(msg(`writing out type paths to : ${typePathsFilename}`))\n  fs.writeFileSync(typePathsFilename, JSON.stringify(typePaths))\n\n  writeTypePathsActivity.end()\n}\n\nexport const onPreExtractQueries: NonNullable<\n  GatsbyNode['onPreExtractQueries']\n> = (gatsbyContext) => {\n  const { store } = gatsbyContext\n  const { program } = store.getState()\n\n  // Add fragments for GatsbyPrismicImage to .cache/fragments.\n  fs.copyFileSync(\n    path.resolve(__dirname, '../fragments.js'),\n    path.resolve(\n      program.directory,\n      '.cache/fragments/gatsby-source-prismic-fragments.js',\n    ),\n  )\n}\n"],"names":["baseSchema","repositoryName","struct","accessToken","releaseID","schemas","linkResolver","htmlSerializer","fetchLinks","lang","typePathsFilenamePrefix","prismicToolbar","imageImgixParams","auto","fit","q","imagePlaceholderImgixParams","w","blur","plugins","PluginOptions","shouldDownloadImage","msg","pathResolver","schemasDigest","message","mapObjVals","fn","obj","result","key","mapObjValsP","async","keys","Object","Promise","all","map","isEmptyObj","_","buildSchemaTypeName","apiId","pascalCase","transform","pascalCaseTransformMerge","LinkFieldType","FieldType","GraphQLType","SliceChoiceDisplay","fieldToType","field","path","context","customTypeApiId","enqueueTypeDef","enqueueTypePath","gatsbyContext","sliceZoneId","schema","gatsbySchema","reporter","type","UID","Color","Select","Text","String","Boolean","StructuredText","Number","Float","Date","Timestamp","extensions","dateformat","GeoPoint","Embed","Image","thumbnails","config","_field$config","thumbnail","name","ImageThumbnail","Link","Group","groupTypeName","buildObjectType","fields","subfield","subfieldApiId","infer","Slices","slicesTypeName","sliceChoiceTypes","entries","choices","sliceChoiceApiId","sliceChoice","buildUnionType","types","resolve","parent","_args","info","nodeModel","getNodesByIds","ids","Slice","non-repeat","primaryFields","repeat","itemsFields","sliceFieldTypes","slice_type","slice_label","primaryTypeName","primaryField","primaryFieldApiId","primary","itemTypeName","itemField","itemFieldApiId","items","interfaces","AlternateLanguages","fieldPath","join","warn","JSON","schemaToTypeDefs","uid","uidField","dataFields","values","reduce","acc","tab","fieldApiId","uidFieldType","alternateLanguagesFieldType","dataTypeName","dataField","dataFieldApiId","schemaTypeName","schemaFieldTypes","data","dataRaw","dataString","first_publication_date","href","url","last_publication_date","tags","alternate_languages","prismicId","ID","_previewable","IMAGE_FIELD_KEYS","pagedGet","client","queryOptions","page","pageSize","documents","verbose","response","query","doc","results","push","total_results_size","normalizeField","env","createNodeId","createNode","createContentDigest","typePaths","normalizeStructuredTextField","normalizeLinkField","normalizeImageField","normalizeSlicesField","stringifiedPath","stringify","def","find","x","test","getTypeForPath","baseObj","pick","thumbsObj","omit","thumb","normalizeObjs","sliceNodeIds","slice","index","sliceNodeId","id","normalizedPrimary","normalizeObj","normalizedItems","node","undefined","internal","contentDigest","item","link_type","Document","objs","_path","pluginOptions","store","cache","actions","touchNode","shouldAttemptToCreateRemoteFileNode","value","fileNodeID","cachedImageDataKey","cachedImageData","get","nodeId","fullQualityUrl","URL","searchParams","delete","fileNode","createRemoteFileNode","toString","set","error","Error","localFile","linkResolverForField","linkedDocId","PrismicDOMLink","document","raw","_apiId","_doc","_env","htmlSerializerForField","html","PrismicDOMRichText","asHtml","text","asText","replace","sourceNodes","createTypes","program","getState","createTypesActivity","activityTimer","fetchDocumentsActivity","createNodesActivity","writeTypePathsActivity","coerced","validatePluginOptions","panic","start","typeDefs","typeDef","AllDocumentTypes","filter","typePath","length","buildScalarType","ImageThumbnails","serialize","fieldTypes","buildImageThumbnailsType","schemasToTypeDefs","imgixImageTypes","imageTypes","defaultImgixParams","defaultPlaceholderImgixParams","resolveUrl","resolveWidth","dimensions","_obj$dimensions","width","resolveHeight","_obj$dimensions2","height","PrismicImageFixedType","createImgixFixedType","PrismicImageFluidType","createImgixFluidType","description","alt","copyright","createImgixUrlSchemaFieldConfig","fixed","createImgixFixedSchemaFieldConfig","fluid","createImgixFluidSchemaFieldConfig","link","buildPrismicImageTypes","end","getApi","createClient","ref","refs","r","fetchAllDocuments","input","createEnvironment","docs","linkResolverForDoc","docNodeId","docUrl","normalizedData","normalizedAlernativeLanguages","documentToNodes","documentsToNodes","md5","typePathsFilename","directory","part","fs","writeFileSync","onPreExtractQueries","copyFileSync","__dirname"],"mappings":"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"}