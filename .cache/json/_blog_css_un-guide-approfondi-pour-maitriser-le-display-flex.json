{"data":{"prismicPost":{"id":"7838b1e5-4c0c-57fc-90b5-cd22e2738665","data":{"post_title":{"text":"Bien maîtriser le display flex"},"post_preview_description":{"text":"Votre guide complet sur la mise en page en CSS avec flexbox. Ce guide complet explique tout sur flexbox, en se concentrant sur les différentes propriétés possibles pour l'élément parent (le conteneur flex) et les éléments enfants (les éléments flex). Il comprend également un historique, des démos, des modèles et un tableau de prise en charge par les navigateurs."},"post_body":[{"__typename":"PrismicPostPostBodyText","id":"eac7d593-6af6-5589-b829-ed5c00a149a1","primary":{"rich_text":{"html":"<p>Le FlexBox Layout a pour but de faciliter le positionnement des éléments entre eux. Une manière bien plus compréhensible et agréable  à utiliser que l&#39;ancienne méthode où il fallait jouer avec les propriétés <em>float</em> et <em>clear.</em></p><p>L&#39;idée principale derrière ça est de donner au parent/conteneur la possibilité de modifier le comportement des enfants/items pour remplir au mieux la place qu&#39;ils ont à leur disposition et pouvoir rapidement et simplement modifier leur taille en fonction des devices. <br />Autre point très important c&#39;est la possibilité de gérer des directions.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyText","id":"a316e354-56be-51ed-b696-c6c69d57ccf1","primary":{"rich_text":{"html":"<p>Avec le display Flex et le display Grid, les différentes propriétés qui s&#39;appliquent se divisent en <strong>deux catégories</strong>, celles qui s&#39;appliquent aux <strong>parents</strong>, et celles qui s&#39;appliquent aux <strong>enfants</strong> .</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"141c49c1-9da2-5f2f-aec6-8a3ccaf88fa9","primary":{"hn":{"text":"Les propriétés appliquées au parent","html":"<h2>Les propriétés appliquées au parent</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"cd585fcb-91e7-5a8d-b14b-7c71fc897f6a","primary":{"rich_text":{"html":"<p>Il faut définir avant toute chose un conteneur, ou un parent et appliquer <em>flex </em>à la propriété <em>display.</em></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"9d92412c-3e0c-52f2-84a8-189715ef81d0","primary":{"hn":{"text":"La propriété Display","html":"<h3>La propriété Display</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"c30e73b3-95d8-53eb-8892-db755d1708b3","primary":{"rich_text":{"html":"<p>Il faut définir avant toute chose un conteneur, ou un parent et appliquer <em>flex </em>à la propriété <em>display.<br /></em>Petite parenthèse le fonctionnement de <em>flex</em> et <em>inline-flex</em> est identique. Le comportement est en fait identique à <em>block</em> / <em>inline-block. </em>A savoir que par défaut un conteneur flex prendra toute la largeur qu&#39;il a sa disposition, comme un élément block ; mais à l&#39;inverse inline-flex prendra uniquement la largeur dont il a besoin, comme un élément inline-block.</p><p>Cela mettra l&#39;ensemble de ses enfants sur une seule ligne. Par défaut, la direction est <em>row (ligne) </em>est dans l&#39;ordre standard</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"3f8b459c-c119-533b-adce-8e6af64e1550","primary":{"code_snippet":{"text":".parent {\n    display: flex;\n}"},"language":{"text":"css"}}},{"__typename":"PrismicPostPostBodyHn","id":"879fc3dc-dca5-550a-bc8f-21dcd7db36f6","primary":{"hn":{"text":"La propriété flex-direction","html":"<h3>La propriété flex-direction</h3>"}}},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"f47880d8-d2e7-5126-9934-ca19b0a01bfc","primary":{"code_snippet":{"text":".parent {\n    display: flex;\n\n    flex-direction: row | row-reverse | column | column-reverse\n}"},"language":{"text":"css"}}},{"__typename":"PrismicPostPostBodyText","id":"819794e0-754b-5234-b22e-bf61927f2468","primary":{"rich_text":{"html":"<p>Ici flex-direction peut prendre 4 valeurs, divisible en deux, row ou column. Row les éléments se placeront sur la même ligne, et column... dans la même colonne, enfin row-reverse et column-reverse vont inverser l&#39;ordre des enfants, le premier deviendra le dernier et inversement</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"ec4891fa-d9a7-5430-81d1-6b77f5f3dea8","primary":{"hn":{"text":"La propriété flex-wrap","html":"<h3>La propriété flex-wrap</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"49e96cfa-a8c2-5535-975b-07cf0f5a9814","primary":{"rich_text":{"html":"<p>Elle peut prendre 3 valeurs : wrap, wrap-reverse, nowrap</p><p>Par défaut les éléments vont tous se positionner sur la même ligne, c&#39;est le comportement <em>nowrap</em> et peu importe la taille de votre conteneur<br />Si l&#39;on souhaite pas forcer le rétrécissement des éléments et les faire passer à la ligne, il faudra appliquer la valeur wrap, et les éléments iront à la ligne de haut en bas.</p><p>Enfin si la propriété css wrap-reverse est appliquée, même comportement sauf que les éléments se positionneront de bas en haut, mais toujours de la gauche vers la droite.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"5053e206-0c34-5d0a-9e7a-f30aa22ee859","primary":{"code_snippet":{"text":".parent {\n    display: flex;\n\n    flex-wrap: wrap | wrap-reverse | nowrap\n}"},"language":{"text":"css"}}},{"__typename":"PrismicPostPostBodyHn","id":"1608d674-42b1-526a-98ff-e4e2d8751286","primary":{"hn":{"text":"La propriété flex-flow","html":"<h3>La propriété flex-flow</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"54ba7a08-8093-5164-8838-6ded67ab2fa6","primary":{"rich_text":{"html":"<p>C&#39;est une propriété pour les petits pressés, c&#39;est en fait un <strong>raccourci</strong> entre les deux propriétés <strong>flex-direction </strong>et<strong> flex-wrap</strong> qui ensemble, vont définir le comportement général du contenu. </p><p>Les <strong>valeurs par défaut </strong>sont <strong>row</strong> et<strong> no wrap</strong>, le comportement de base.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"c7d733bf-40a0-54bd-9013-e9b0e4b2cd89","primary":{"code_snippet":{"text":".parent {\n    display: flex;\n\n    flex-flow: column wrap;\n}"},"language":{"text":"css"}}},{"__typename":"PrismicPostPostBodyHn","id":"7bf661db-3797-52b3-814a-967f855faa6b","primary":{"hn":{"text":"La propriété justify-content","html":"<h3>La propriété justify-content</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"647c42c4-8b7d-56fe-9665-2d6c1f800324","primary":{"rich_text":{"html":"<p>Il est très facile de confondre <em>align-items </em>et <em>justify-content</em>. Ces deux propriétés ont le même, but aligner/centrer les éléments à l&#39;intérieur.<br />La différence majeure est que justify-content va centrer ses enfants dans l&#39;axe principal, l&#39;axe déterminé par flex-direction.<br />Ainsi si nous avons un parent avec la propriété <em>flex-direction à row</em><strong><em></em> </strong>et la propriété <em>justify-content</em> à <em>center</em>, les éléments à l&#39;intérieur seront <strong>centrés de gauche à droite</strong>.<br />En revanche avec<strong> <em></em></strong><em>flex-direction</em> qui vaut <em>column</em>, <strong><em>j</em></strong>ustify-content:center, va centrer les éléments de <strong>haut en bas.</strong></p><p>Les différentes valeurs possibles :</p><ul><li><strong>flex-start</strong> : aligne les éléments au début (si display row à gauche, si display column en haut).</li><li><strong>flex-end </strong>: aligne les éléments à la fin</li><li><strong> cente</strong>r : centre les éléments</li><li><strong>space-between</strong> : ça commence à se corser - premier élément au début, le dernier au fond, le reste des éléments est réparti de manière égale.</li><li><strong>space-around</strong> : Les éléments sont répartis de manière égale sur la ligne avec un espace égal autour d&#39;eux. Notez que visuellement, les espaces ne sont pas égaux, puisque tous les éléments ont un espace égal des deux côtés. Le premier élément aura une unité d&#39;espace contre le bord du conteneur, mais deux unités d&#39;espace entre l&#39;article suivant car celui-ci a son propre espacement qui s&#39;applique.</li><li><strong>space-evenly </strong>: les éléments sont répartis pour faire en sorte qu&#39;il y ai toujours le même espace entre eux, mais aussi avec le bord. </li><li><strong>end</strong> : se base sur le sens de lecture, dans notre système occidentale de gauche à droite, end correspond donc à droite si flex-direction vaut row</li><li><strong>start</strong> : se base aussi sur le sens de lecture, cette fois au début<br /></li></ul>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"44b9da93-4d9d-5261-96d4-f2255ec66cd7","primary":{"hn":{"text":"La propriété align-items","html":"<h3>La propriété align-items</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"f9ab80a3-5f69-50f9-920f-e79b1ed65b62","primary":{"rich_text":{"html":"<p>Comme mentionné plus haut la propriété align-items va influer sur le comportement des enfants, mais perpendiculairement à ce que fais justify-content. Ici aussi plusieurs valeurs pour cette propriété :</p><ul><li><strong>stretch (default)</strong> : les éléments à l&#39;intérieur vont s&#39;étirer pour remplir leur conteneur. Attention donc si vous enfants directs sont des images.</li><li><strong>flex-start/start </strong>: la différence entre ses différentes propriétés est tout aussi subtile que pour <em>justify-content. Start</em> se base sur le sens de lecture, alors que <em>flex-start</em> va bien se poser au début, c&#39;est à dire que pour un élément en flex-direction: row, justify-content:flex-start placera les enfants en haut du conteneur.</li><li><strong>flex-end/end</strong> idem mais dans le sens inverse je vais pas vous refaire le dessin. Je ne vais pas insulter votre intelligence</li><li><strong>center </strong>le grand classique</li><li><strong>baseline</strong> : l&#39;alignement se fera par rapport à la hauteur de ligne plus précisément par rapport à la valeur<em> align:baseline</em></li></ul>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"7b5bb235-24e6-5b8e-9135-bad3780abc5f","primary":{"hn":{"text":"La propriété align-content","html":"<h3>La propriété align-content</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"3efab3fb-9ae7-5fb1-b6df-ed63c1f95cd0","primary":{"rich_text":{"html":"<p><strong>Attention elle ne fonctionne que lorsque vous avez plusieurs lignes. </strong>Tout comme align-item elle agit sur l&#39;axe perpendiculaire et positionnera donc l&#39;ensemble de vos lignes en fonction de la valeur saisie.</p><ul><li><strong>stretch (default)</strong>: Cela va étirer l&#39;ensemble de vos éléments de manière égale, pour qu&#39;ensemble ils remplissent votre conteneur.</li><li><strong>flex-start / start </strong>: Les éléments sont placés au début de l&#39;axe perpendiculaire déterminé par flex-direction. La différence entre flex-start et start et que flex-start va se basera sur le conteneur flex, et start se basera sur l&#39;ordre de lecture</li><li><strong>flex-end / end</strong> : Les éléments sont placés à la fin de l&#39;axe perpendiculaire, avec flex-end vos éléments iront vont se positionner la fin de votre conteneur flex alors que end se basera sur le sens de lecture.</li><li><strong>center</strong>: les éléments vont se centrer. </li><li><strong>baseline</strong>: les éléments vont s&#39;aligner en fonction de leur alignement sur la propriété align baseline.</li></ul>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"167e835a-c579-556b-8749-721490838929","primary":{"hn":{"text":"Les propriétés appliquées aux enfants","html":"<h2>Les propriétés appliquées aux enfants</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"6edd5f29-4a7e-5e78-bfcf-a92174c0847c","primary":{"rich_text":{"html":"<p>Après avoir vu  l&#39;ensemble des propriétés applicable à conteneur en display flex, il est temps de voir ce que nous pouvons faire avec les enfants</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"cc751e02-3f42-5f61-ba42-2af314ac6fad","primary":{"hn":{"text":"La propriété order","html":"<h3>La propriété order</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"a7c709ea-358d-5c27-8d75-c0395f02dc71","primary":{"rich_text":{"html":"<p>Comme son nom peut le laisser sous entendre, vous allez pouvoir gérer l&#39;ordre des éléments indépendamment de leur position dans le DOM. Cette propriété est particulièrement utile en responsive </p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"8bbe9fa9-8f07-58c5-92fd-3778f258fafb","primary":{"code_snippet":{"text":".item {\n  order: 5; /* valeur par défaut 0 */\n}"},"language":{"text":"css"}}},{"__typename":"PrismicPostPostBodyHn","id":"dc575044-4e94-552d-81f7-ee4a18b8da11","primary":{"hn":{"text":"La propriété flex-grow","html":"<h2>La propriété flex-grow</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"e3362502-24d6-5ddb-9355-162d09ab1697","primary":{"rich_text":{"html":"<p>Cela définit la capacité d&#39;un élément à occuper de la place à l&#39;intérieur de son conteneur. Cette propriété accepte une valeur sans unité(0, 1, 2...) qui sert de proportion. Elle dicte la quantité d&#39;espace disponible à l&#39;intérieur du conteneur que l&#39;élément doit occuper.</p><p>Si tous les éléments ont la valeur 1, l&#39;espace restant dans le conteneur sera distribué de manière égale à tous les enfants. Si l&#39;un des enfants a une valeur de 2, il aura une double part d&#39;espace restant et occupera donc deux fois plus de place que les autres (ou du moins il essaiera de le faire).</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"68b3dc70-cc34-5e13-a8d1-175fe5404c11","primary":{"hn":{"text":"La propriété flex-shrink","html":"<h3>La propriété flex-shrink</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"fbb73fb8-1277-5e88-a37c-212813ab7176","primary":{"rich_text":{"html":"<p>Elle spécifie le &quot;facteur de rétraction&quot;, qui détermine de combien l&#39;élément flexible va se rétracter par rapport au reste des éléments dans le conteneur flex, lorsqu&#39;il n&#39;y a pas assez de place sur la rangée.</p><p>Lorsqu&#39;il est omis, il a une valeur par défaut à 1 et le facteur de rétraction est multiplié par le <em>flex-basis</em> lors de la répartition de l&#39;espace négatif.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"85486572-c85c-5cc3-b9e3-9a0ea0db90a2","primary":{"hn":{"text":"La propriété flex-basis","html":"<h3>La propriété flex-basis</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"4ad1f2a4-8d6a-5280-8d74-850d8e9958b4","primary":{"rich_text":{"html":"<p>Elle précise la taille initiale de l&#39;élément flexible, avant que l&#39;espace disponible ne soit réparti en fonction des facteurs de flexibilité (flex-grow et flex-shrink). Lorsqu&#39;il est omis dans le raccourci flex que nous allons voir sa valeur spécifiée est la longueur zéro.</p><p>Une valeur flex-basis fixée à auto va fixer la taille de l&#39;élément en fonction des propriétés largeur et hauteur déterminées (qui peuvent elle-même être à auto, au quel cas la taille de l&#39;élément est déterminé en fonction de son contenu).</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"cd471dff-1882-52c2-98e5-63e74d560575","primary":{"hn":{"text":"La propriété flex","html":"<h3>La propriété flex</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"55592bbf-8f4f-59a7-9e24-68e29cda407b","primary":{"rich_text":{"html":"<p>C&#39;est l&#39;abréviation de &quot;flex-grow&quot;, &quot;flex-shrink&quot; et &quot;flex-basis&quot; combinés. Les deuxième et troisième paramètres (flex-shrink et flex-basis) sont facultatifs. La valeur par défaut est 0 1 auto, mais si vous la définissez avec une seule valeur numérique, c&#39;est comme 1 0.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"79d1652c-81a2-557b-922a-a6d73432856d","primary":{"code_snippet":{"text":"\n.flex-item {\n\n  /* ceci */\n  flex: 1 100px;\n\n  /* est identique et on laisse flex shrink de côté */\n  flex-grow: 1;\n  flex-basis: 100px;\n}\n"},"language":{"text":"css"}}},{"__typename":"PrismicPostPostBodyHn","id":"eb4c26d0-1a77-505a-82bb-91ddf6476130","primary":{"hn":{"text":"Les valeurs les plus communes.","html":"<h4>Les valeurs les plus communes.</h4>"}}},{"__typename":"PrismicPostPostBodyText","id":"bcd8e045-bd9c-5fbc-9c8c-b56ddfb6f430","primary":{"rich_text":{"html":"<p>Si ce n&#39;est pas encore très clair voici quelques exemples avec les valeurs les plus souvent utilisés.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"344e689d-d31b-543b-a3f1-31fafbb6d62e","primary":{"hn":{"text":"flex: 0 auto;","html":"<h5>flex: 0 auto;</h5>"}}},{"__typename":"PrismicPostPostBodyText","id":"036808c5-f863-55d7-a748-ef6eedaff8b9","primary":{"rich_text":{"html":"<p>C&#39;est la même chose que flex: initial et le raccourci de la valeur par défaut, flex: 0 1 auto. Il taille les éléments en se basant sur leur propriété width et height.</p><p>Il fait en sorte que les éléments restent inflexibles même si il reste de l&#39;espace restant, mais rétrécissent à leur minimum quand il n&#39;y a plus assez d&#39;espace. les marges auto peuvent être utilisés pour aligner des éléments flex sur l&#39;axe principal.</p><p></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"a31882c1-c640-5f1b-9324-db24137a0d1b","primary":{"hn":{"text":"flex: auto;","html":"<h5>flex: auto;</h5>"}}},{"__typename":"PrismicPostPostBodyText","id":"08d07058-d34a-56fd-b36e-cb346af97c7e","primary":{"rich_text":{"html":"<p>C&#39;est l&#39;équivalent à <em>flex: 1 1 auto</em>. Attention ce n&#39;est pas la valeur par défaut. Il va se baser sur la propriété width et height, mais les rendra complètement flexibles et prendront toute la place restante sur l&#39;axe principal.</p><p>Si tous les éléments ont soit<em> flex: auto, flex: initial, ou flex: none</em>,  l&#39;espace restant sera attribué à l&#39;élément avec flex: auto.</p><p></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"7b3430ee-969e-5002-b16f-0b64c893da63","primary":{"hn":{"text":"flex: none","html":"<h5>flex: none</h5>"}}},{"__typename":"PrismicPostPostBodyText","id":"df2b6d1e-a2e5-57ad-8cdc-f10d61c34308","primary":{"rich_text":{"html":"<p>C&#39;est l&#39;équivalent à <em>flex: 0 0 auto</em>. il va tailler les éléments en fonction de width et height encore mais resteront complètement inflexibles.<br />C&#39;est donc identique à <em>flex: initial. </em>Sauf que les éléments ne seront pas autorisés à rétrécir.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"9415fcff-4421-5769-ac10-da6192177805","primary":{"hn":{"text":"La propriété align-self","html":"<h5>La propriété align-self</h5>"}}},{"__typename":"PrismicPostPostBodyText","id":"cd8d6454-eed8-5def-9651-30541fc4fb47","primary":{"rich_text":{"html":"<p>De base les éléments vont se positionner avec la propriété align-items du parent. Mais si vous souhaitez changer le positionnement de l&#39;un des éléments c&#39;est possible avec la propriété align-self qui peut prendre les mêmes propriétés</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"e78ad5bf-e11f-50c2-ab8f-dd1b4f470f88","primary":{"hn":{"text":"Conclusion","html":"<h2>Conclusion</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"f8a370a1-7514-5f16-b8fe-d6c56860405e","primary":{"rich_text":{"html":"<p>J&#39;espère que vous maîtrisez un peu mieux le layout avec display: flex. Et si vous ou votre entreprise recherchez un <a  href=\"https://www.developpeur-web.tech\">développeur web sur Toulouse</a> ou ses environs n&#39;hésitez pas à me contacter.</p>"}},"slice_type":"text"}],"post_hero_image":{"alt":"illustration css display flex","dimensions":{"height":522,"width":868},"localFile":null}}}},"pageContext":{"uid":"un-guide-approfondi-pour-maitriser-le-display-flex","category":"css"}}