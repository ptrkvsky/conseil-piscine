{"data":{"prismicPost":{"id":"9c43fddb-99bc-53d0-9c94-e4580bfae14a","data":{"post_title":{"text":"Gatsby ou Next quel framework choisir en 2020 ?"},"post_preview_description":{"text":"Comparons ensembles les avantages et les inconvénients de Gatsby et NextJS, deux framework Javascript basés sur la librairie React."},"post_body":[{"__typename":"PrismicPostPostBodyText","id":"8abbdb37-344a-5ccd-9112-02aef5aea853","primary":{"rich_text":{"html":"<p>Les framework javascript ne manquent, cela en donnerait presque le vertige. Mais comparons ensemble  deux framework qui ont sur faire leur place dans cette jungle épaisse. <strong>Gatsby </strong>(2015) et <strong>NextJS </strong>(2016)</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyImage","id":"7eeb1729-ee38-5471-ba64-e8cf42aab6ff","primary":{"image":{"alt":"Humour à propos du nombre de framework javascript","dimensions":{"height":409,"width":680},"localFile":null}}},{"__typename":"PrismicPostPostBodyText","id":"696ce2c2-648c-593b-ad41-dd6d20556660","primary":{"rich_text":{"html":"<p>Jusqu&#39;à il y a quelques mois, le choix entre NextJS et Gatsby était facile. Besoin de faire un<strong> site statique</strong>, comme pour un blog ou une page d&#39;aide dont le contenu ne change pas trop souvent ? Cool, choisissez Gatsby. Vous avez besoin de créer un site avec un <strong>rendu côté serveur</strong>, comme une boutique en ligne avec ses milliers d&#39;articles, son compte client ? Super, vous pouvez compter sur NextJS.</p><p>Avec la sortie de NextJS 9.3, les frontières se sont estompées.<strong> NextJS prend désormais en charge la génération de sites statiques </strong>de nouvelle génération. En utilisant les nouvelles méthodes de construction <em>getStaticProps </em>et <em>getStaticPaths</em>, les utilisateurs peuvent créer des sites statiques, tout comme Gatsby.</p><p>La question est donc la suivante : si <strong>NextJS peut faire tout ce que Gatsby peut faire</strong>, mais que Gatsby ne peut pas faire tout ce que NextJS peut faire, pourquoi choisir Gatsby ?</p><p>Jetons un coup d&#39;œil sur les forces et les faiblesses de Gatsby et de NextJS, et enfin, faisons quelques recommandations sur ce que vous devriez utiliser pour votre prochain projet.</p><p></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"6532f765-a133-5008-b4f7-d70c977269e8","primary":{"hn":{"text":"Pourquoi choisir le framework Gatsby ?","html":"<h2>Pourquoi choisir le framework Gatsby ?</h2>"}}},{"__typename":"PrismicPostPostBodyImage","id":"09de37b9-650a-54c3-9f1e-d9a84dace3db","primary":{"image":{"alt":"Gatsby","dimensions":{"height":4000,"width":6000},"localFile":null}}},{"__typename":"PrismicPostPostBodyText","id":"0935398c-a8a0-564b-94d9-d46fe81af35b","primary":{"rich_text":{"html":"<p>Gatsby est un framework pour  la création de sites statiques performants basé sur React et GraphQL. En compilant vos applications React en HTML statique, il crée des pages web qui obtiennent les meilleures notes sur les analyseurs de vitesse de sites web comme le Lighthouse de Google.</p><p>Gatsby dispose d&#39;un <strong>énorme écosystème de thèmes, de plugins et de projets de démarrage.</strong></p><p></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"99358137-e929-5850-b642-0be666bcd7f9","primary":{"hn":{"text":"Les plugins Gatsby","html":"<h3>Les plugins Gatsby</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"981b31b7-7003-55df-8328-128175aa14e0","primary":{"rich_text":{"html":"<p>Les plugins Gatsby sont des paquets de nœuds qui mettent en œuvre les API Gatsby. Vous téléchargez les plugins Gatsby depuis NPM et les incluez dans votre fichier gatsby.config.js.</p><p>L&#39;un de mes plugins Gatsby préférés s&#39;appelle <em>gatsby-image</em>. Gatsby image redimensionne vos images au moment de la construction, créant des images plus petites pour que les petits appareils ne téléchargent pas des images de la taille d&#39;un bureau. Il <strong>optimise vos images,</strong> les rendant plus petites et plus rapides à charger. Et il charge paresseusement les images pour accélérer encore plus votre site web. Enfin, il applique une technique appelée &quot;floutage&quot; de vos images pour une expérience utilisateur sans faille.</p><p>Une<a  href=\"https://github.com/gatsbyjs/gatsby/issues/24332#issuecomment-700058892\"> version 2 </a>est actuellement en phase de beta, encore plus performante.</p><p>Nous n&#39;avons pas le temps dans cet article de passer en revue tous les plugins Gatsby populaires, mais croyez-moi, il y en a des tonnes. Il existe un plugin pour tout, de l&#39;ajout de polices Google à l&#39;analyse de votre pack Webpack, en passant par la gestion de votre site web hors ligne.</p><p></p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"c04a9c0f-08ca-5aa7-b35f-34a79f83f44b","primary":{"hn":{"text":"Les thèmes Gatsby","html":"<h2>Les thèmes Gatsby</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"c8e07425-0bcc-5a8a-b8e7-5dc2a4d58113","primary":{"rich_text":{"html":"<p>Les thèmes sont l&#39;un des principaux arguments de vente de Gatsby. Ils vous permettent de partager des fonctionnalités, des sources de données et même la conception de plusieurs projets. Vous pouvez télécharger et mettre à jour les thèmes Gatsby sous forme de paquets NPM.</p><p>Les plugins et thèmes Gatsby nous permettent d&#39;abstraire la configuration, le fetching de données, voire les styles et l&#39;interface utilisateur. Cela fait de Gatsby un excellent choix pour les petits projets comme les portfolios et les blogs personnels.</p><p>Cependant, <a  href=\"https://www.gatsbyjs.com/docs/scaling-issues/\">Gatsby a des problèmes de scalabilité</a> ce n&#39;est pas un choix aussi judicieux pour les applications plus grandes et plus complexes, on parle de très grosses applications web, à plusieurs dizaines de milliers de pages. Si les temps de sont une problématique Gatsby propose une solution cloud pour des  <a  href=\"https://www.gatsbyjs.com/cloud/\">builds plus rapides</a> </p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyImage","id":"b71a3a8b-3d9f-51e7-9fcc-fd4cd87ebbf7","primary":{"image":{"alt":"Humour sur la création de site internet","dimensions":{"height":1139,"width":1709},"localFile":null}}},{"__typename":"PrismicPostPostBodyHn","id":"167b185a-e739-5cff-bcff-bcfbe85ceb53","primary":{"hn":{"text":"Pourquoi choisir le framework NextJS ?","html":"<h2>Pourquoi choisir le framework NextJS ?</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"80179f25-6c27-5c61-928c-d9c8e85a6f47","primary":{"rich_text":{"html":"<p>Next.js est un <strong>framework React.js</strong> utilisé à dans différentes situations. Alors qu&#39;il était initialement conçu pour <strong>rendre l&#39;application côté serveur</strong>, Next.js 9.3 vous permet maintenant de <strong>générer des pages statiques</strong> et d&#39;utiliser AMP dans votre application. </p><p>Next.js est très similaire au React.js que nous connaissons. Vous configurez un projet Next différemment, bien sûr, mais à la fin vous écrivez le code de React. Next fait le reste pour nous.</p><p>En raison de cette <strong>simplicité</strong> et des fonctions formidables qui peuvent rendre n&#39;importe quel projet React juste un peu meilleur, je pense qu&#39;il n&#39;y a aucune excuse pour ignorer Next.js.</p><p>Regardons comme une page est implémentée</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyCodeSnippet","id":"14b7a181-8958-588f-8480-c016047885d3","primary":{"code_snippet":{"text":"// pages/posts/[id].js\nimport fetch from 'node-fetch'\n\nfunction Post({ post }) {\n  // Render post...\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map(post => ({\n    params: {id: post.id}\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n\nexport default Post"},"language":{"text":"javascript"}}},{"__typename":"PrismicPostPostBodyText","id":"b6f0f7b2-b1a8-58b8-bc69-677aad365aaa","primary":{"rich_text":{"html":"<p>Nous avons défini ici un itinéraire dynamique appelé<em> pages/posts/[id].js</em>. </p><p>Afin de le construire statiquement, nous devons donner à NextJS deux choses :</p><ol><li>Une liste des ids que nous devons prendre en charge. Pour cela, nous utilisons getStaticPaths.</li><li>Les données pour chacune de ces pages (générées à partir de nos ids). Pour cela, nous utilisons getStaticProps.</li></ol><p>En utilisant ces informations, NextJS construira pour nous une page pour chacun des identifiants des billets de notre blog, et il transmettra les données que nous avons récupérées de notre service externe à notre composant.</p><p>Contrairement à Gatsby, NextJS ne nous oblige pas à utiliser GraphQL ou REST. Il reste agnostique et vous laisse le choix. Il vous permet d&#39;utiliser des pages rendues statiquement et des pages rendues par le serveur.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"9e2ec4be-9f8e-51e6-b58f-c67e3ac23705","primary":{"hn":{"text":"Quels sont les inconvénients de NextJS ?","html":"<h3>Quels sont les inconvénients de NextJS ?</h3>"}}},{"__typename":"PrismicPostPostBodyText","id":"61d6c467-1e84-5c55-8a57-f834094d5839","primary":{"rich_text":{"html":"<p>Cependant, NextJS n&#39;est pas agnostique partout. Sa <strong>navigation basée sur des fichiers</strong> fonctionne mieux pour le rendu statique et côté serveur. Elle <strong>ne permet pas d&#39;avoir des itinéraires dynamiques pour les données rendues par le client</strong>. Pour ceux d&#39;entre nous qui sont habitués à React Router, cela ressemble à une grande régression.</p><p>Supposons que vous vouliez utiliser le rendu côté client pour un itinéraire comme /products/yellow-dress-1. Avec NextJS, ce n&#39;est pas possible. Il vous faudrait plutôt utiliser des paramètres de requête comme ceci /product?productId=adresse-jaune-1.</p>"}},"slice_type":"text"},{"__typename":"PrismicPostPostBodyHn","id":"f6abec3d-eabd-57d7-973a-1a114b862a62","primary":{"hn":{"text":"Conclusion, quel framework choisir ?","html":"<h2>Conclusion, quel framework choisir ?</h2>"}}},{"__typename":"PrismicPostPostBodyText","id":"c1143712-2ed7-5460-b2f1-51fa92b42e66","primary":{"rich_text":{"html":"<p>NextJS est un outil extrêmement puissant pour créer des applications React.</p><p>J&#39;aime l&#39;idée de combiner le meilleur de la génération de sites statiques et du rendu côté serveur. Pour un site de commerce électronique, vous pourriez rendre statiquement des pages qui ne changent pas très souvent. Comme votre page de contact, les informations sur l&#39;expédition ou les blogs. Vous pourriez rendre sur le serveur des pages qui changent, comme vos pages de produits.</p><p>NextJS est un excellent choix pour les petites et grandes applications web, pour les projets commerciaux et pour les portfolios personnels. La seule mise en garde à laquelle je pense est la rigidité du routage de NextJS (et de l&#39;impact SEO que cela peut avoir ?). Assurez-vous simplement que vous êtes ok avec les limites de son routage avant de commencer votre nouveau projet NextJS.</p><p>Maintenant que NextJS supporte le rendu de sites statiques de nouvelle génération, je recommande de l&#39;utiliser à la place de Gatsby. Je crois que (presque) tout ce que vous pouvez faire avec Gatsby, vous pouvez le faire avec NextJS. Et comme NextJS est davantage utilisé dans l&#39;industrie, l&#39;utilisation de NextJS dans votre prochain projet personnel peut vous aider lorsque vous cherchez un emploi.</p><p>La seule chose qui me manque dans mon travail avec Gatsby est le plugin <em>gatsby-image</em>. Une fois que quelqu&#39;un de la communauté NextJS aura écrit une alternative appropriée à <em>gatsby-image</em>, je serai capable d&#39;oublier complètement Gatsby.</p>"}},"slice_type":"text"}],"post_hero_image":{"alt":null,"dimensions":{"height":400,"width":600},"localFile":null}}}},"pageContext":{"uid":"gatsby-vs-next","category":"gatsby"}}